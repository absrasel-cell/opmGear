ðŸ’» MCP SERVER CODE EXAMPLES & TEMPLATES
=======================================

1. MAIN SERVER SETUP (src/server.ts)
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
```typescript
import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { CallToolRequestSchema, ListToolsRequestSchema } from '@modelcontextprotocol/sdk/types.js';
import { productTools } from './tools/products.js';
import { orderTools } from './tools/orders.js';
import { cartTools } from './tools/cart.js';
import { pricingTools } from './tools/pricing.js';
import { supportTools } from './tools/support.js';

const server = new Server({
  name: 'uscc-ecommerce-server',
  version: '1.0.0',
}, {
  capabilities: {
    tools: {},
    resources: {},
  },
});

// Register all tools
const allTools = [
  ...productTools,
  ...orderTools,
  ...cartTools,
  ...pricingTools,
  ...supportTools
];

server.setRequestHandler(ListToolsRequestSchema, async () => {
  return { tools: allTools };
});

server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;

  try {
    switch (name) {
      case 'search_products':
        return await handleSearchProducts(args);
      case 'get_product_details':
        return await handleGetProductDetails(args);
      case 'calculate_order_cost':
        return await handleCalculateOrderCost(args);
      // Add other tool handlers
      default:
        throw new Error(`Unknown tool: ${name}`);
    }
  } catch (error) {
    return {
      content: [{ type: 'text', text: `Error: ${error.message}` }],
      isError: true,
    };
  }
});

// Start server
const transport = new StdioServerTransport();
await server.connect(transport);
```

2. API CLIENT WRAPPER (lib/api-client.ts)
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
```typescript
import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';
import { logger } from './logger.js';

export class USCCApiClient {
  private client: AxiosInstance;

  constructor(baseURL: string, apiKey: string) {
    this.client = axios.create({
      baseURL,
      timeout: 10000,
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json',
      },
    });

    this.setupInterceptors();
  }

  private setupInterceptors() {
    this.client.interceptors.request.use((config) => {
      logger.info(`API Request: ${config.method?.toUpperCase()} ${config.url}`);
      return config;
    });

    this.client.interceptors.response.use(
      (response) => {
        logger.info(`API Response: ${response.status} ${response.config.url}`);
        return response;
      },
      (error) => {
        logger.error(`API Error: ${error.message}`);
        throw error;
      }
    );
  }

  async searchProducts(params: {
    query?: string;
    category?: string;
    limit?: number;
    offset?: number;
  }) {
    const response = await this.client.get('/api/sanity/products', { params });
    return response.data;
  }

  async getProductDetails(productId: string) {
    const response = await this.client.get(`/api/sanity/products/${productId}`);
    return response.data;
  }

  async calculateOrderCost(orderData: any) {
    const response = await this.client.post('/api/calculate-cost-unified', orderData);
    return response.data;
  }

  async createOrder(orderData: any) {
    const response = await this.client.post('/api/orders', orderData);
    return response.data;
  }

  async getCart(cartId?: string) {
    const response = await this.client.get('/api/cart', {
      params: cartId ? { cartId } : {}
    });
    return response.data;
  }
}
```

3. PRODUCT TOOLS (tools/products.ts)
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
```typescript
import { z } from 'zod';
import { USCCApiClient } from '../lib/api-client.js';

const SearchProductsSchema = z.object({
  query: z.string().optional().describe('Search query for products'),
  category: z.string().optional().describe('Product category filter'),
  limit: z.number().min(1).max(100).default(20).describe('Number of results to return'),
  offset: z.number().min(0).default(0).describe('Number of results to skip'),
});

const GetProductDetailsSchema = z.object({
  product_id: z.string().describe('Unique product identifier'),
});

export const productTools = [
  {
    name: 'search_products',
    description: 'Search and filter products in the US Custom Cap catalog',
    inputSchema: {
      type: 'object',
      properties: {
        query: { type: 'string', description: 'Search query for products' },
        category: { type: 'string', description: 'Product category filter' },
        limit: { type: 'number', minimum: 1, maximum: 100, default: 20 },
        offset: { type: 'number', minimum: 0, default: 0 },
      },
    },
  },
  {
    name: 'get_product_details',
    description: 'Get detailed information about a specific product',
    inputSchema: {
      type: 'object',
      properties: {
        product_id: { type: 'string', description: 'Unique product identifier' },
      },
      required: ['product_id'],
    },
  },
];

export async function handleSearchProducts(args: any) {
  const params = SearchProductsSchema.parse(args);
  const apiClient = new USCCApiClient(process.env.USCC_API_BASE_URL!, process.env.USCC_API_KEY!);

  try {
    const products = await apiClient.searchProducts(params);

    return {
      content: [{
        type: 'text',
        text: JSON.stringify({
          success: true,
          data: products,
          count: products.length,
          params: params,
        }, null, 2)
      }],
    };
  } catch (error) {
    return {
      content: [{
        type: 'text',
        text: `Error searching products: ${error.message}`
      }],
      isError: true,
    };
  }
}

export async function handleGetProductDetails(args: any) {
  const { product_id } = GetProductDetailsSchema.parse(args);
  const apiClient = new USCCApiClient(process.env.USCC_API_BASE_URL!, process.env.USCC_API_KEY!);

  try {
    const product = await apiClient.getProductDetails(product_id);

    return {
      content: [{
        type: 'text',
        text: JSON.stringify({
          success: true,
          product: product,
        }, null, 2)
      }],
    };
  } catch (error) {
    return {
      content: [{
        type: 'text',
        text: `Error getting product details: ${error.message}`
      }],
      isError: true,
    };
  }
}
```

4. PRICING TOOLS (tools/pricing.ts)
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
```typescript
import { z } from 'zod';
import { USCCApiClient } from '../lib/api-client.js';

const CalculateOrderCostSchema = z.object({
  product_config: z.object({
    product_id: z.string(),
    color: z.string().optional(),
    size: z.string().optional(),
    customizations: z.record(z.any()).optional(),
  }).describe('Product configuration'),
  quantity: z.number().min(1).describe('Order quantity'),
  tier: z.string().optional().describe('Pricing tier (Tier 1, Tier 2, Tier 3)'),
});

export const pricingTools = [
  {
    name: 'calculate_order_cost',
    description: 'Calculate total cost for a custom cap order including all pricing tiers and discounts',
    inputSchema: {
      type: 'object',
      properties: {
        product_config: {
          type: 'object',
          properties: {
            product_id: { type: 'string' },
            color: { type: 'string' },
            size: { type: 'string' },
            customizations: { type: 'object' },
          },
          required: ['product_id'],
        },
        quantity: { type: 'number', minimum: 1 },
        tier: { type: 'string', enum: ['Tier 1', 'Tier 2', 'Tier 3'] },
      },
      required: ['product_config', 'quantity'],
    },
  },
];

export async function handleCalculateOrderCost(args: any) {
  const params = CalculateOrderCostSchema.parse(args);
  const apiClient = new USCCApiClient(process.env.USCC_API_BASE_URL!, process.env.USCC_API_KEY!);

  try {
    const pricing = await apiClient.calculateOrderCost({
      productConfig: params.product_config,
      quantity: params.quantity,
      tier: params.tier || 'Tier 1',
    });

    return {
      content: [{
        type: 'text',
        text: JSON.stringify({
          success: true,
          pricing: {
            base_cost: pricing.baseCost,
            customization_cost: pricing.customizationCost,
            total_cost: pricing.totalCost,
            unit_price: pricing.unitPrice,
            volume_discount: pricing.volumeDiscount,
            quantity: params.quantity,
            tier: params.tier || 'Tier 1',
          },
        }, null, 2)
      }],
    };
  } catch (error) {
    return {
      content: [{
        type: 'text',
        text: `Error calculating order cost: ${error.message}`
      }],
      isError: true,
    };
  }
}
```

5. PACKAGE.JSON TEMPLATE
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
```json
{
  "name": "uscc-mcp-server",
  "version": "1.0.0",
  "description": "MCP server for US Custom Cap e-commerce platform",
  "main": "dist/server.js",
  "type": "module",
  "scripts": {
    "build": "tsc",
    "dev": "tsx watch src/server.ts",
    "start": "node dist/server.js",
    "lint": "eslint src/**/*.ts",
    "test": "jest"
  },
  "dependencies": {
    "@modelcontextprotocol/sdk": "^0.4.0",
    "axios": "^1.6.0",
    "zod": "^3.22.0",
    "winston": "^3.11.0",
    "dotenv": "^16.3.0"
  },
  "devDependencies": {
    "typescript": "^5.3.0",
    "@types/node": "^20.10.0",
    "tsx": "^4.6.0",
    "eslint": "^8.55.0",
    "@typescript-eslint/eslint-plugin": "^6.14.0",
    "jest": "^29.7.0"
  },
  "keywords": ["mcp", "ecommerce", "ai", "custom-caps"],
  "author": "US Custom Cap",
  "license": "MIT"
}
```

6. ENVIRONMENT VARIABLES (.env.example)
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
```env
# US Custom Cap API Configuration
USCC_API_BASE_URL=http://localhost:3000
USCC_API_KEY=your_api_key_here
USCC_SERVICE_ACCOUNT_EMAIL=service@uscustomcap.com

# MCP Server Configuration
MCP_SERVER_PORT=3001
MCP_SERVER_NAME=uscc-ecommerce-server
MCP_SERVER_VERSION=1.0.0

# Logging Configuration
LOG_LEVEL=info
LOG_FILE=logs/mcp-server.log

# Security Configuration
RATE_LIMIT_REQUESTS_PER_MINUTE=100
API_TIMEOUT_MS=10000

# Optional: Database for caching
REDIS_URL=redis://localhost:6379
CACHE_TTL_SECONDS=300
```

7. TYPESCRIPT CONFIG (tsconfig.json)
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
```json
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "ESNext",
    "moduleResolution": "Node",
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true,
    "allowImportingTsExtensions": false,
    "resolveJsonModule": true,
    "declaration": true,
    "outDir": "./dist",
    "rootDir": "./src",
    "removeComments": true,
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "noImplicitReturns": true,
    "noImplicitThis": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist", "**/*.test.ts"]
}
```

These templates provide a solid foundation for your MCP server implementation!