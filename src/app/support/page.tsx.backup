'use client';

import { useState, useEffect, useRef } from 'react';
import { supabase } from '@/lib/supabase';
import { useAuth } from '@/components/auth/AuthContext';
import UploadArtworkComponent from '@/components/ui/UploadArtworkComponent';
import { 
  SparklesIcon, 
  BoltIcon, 
  PaperClipIcon,
  ArrowUpRightIcon,
  CpuChipIcon,
  CheckIcon,
  ClipboardDocumentListIcon,
  CogIcon,
  TruckIcon,
  CurrencyDollarIcon,
  CalculatorIcon,
  ArchiveBoxIcon,
  CalendarDaysIcon,
  ScaleIcon,
  ChevronDownIcon,
  ChatBubbleLeftRightIcon,
  MagnifyingGlassIcon,
  PlusIcon,
  TrashIcon,
  ClockIcon,
  ArrowPathIcon
} from '@heroicons/react/24/outline';

interface Message {
  id: string;
  role: 'user' | 'assistant' | 'system';
  content: string;
  model?: string;
  timestamp: Date;
  metadata?: any;
}


interface UserProfile {
  id?: string;
  name?: string;
  email?: string;
  phone?: string;
  address?: any;
  company?: string;
}

interface GuestContactInfo {
  name: string;
  email: string;
  phone?: string;
  address?: string;
  company?: string;
}

interface QuoteVersion {
  id: string;
  version: number;
  timestamp: Date;
  pricing: {
    baseProductCost: number;
    logosCost: number;
    deliveryCost: number;
    total: number;
    quantity: number;
  };
  quoteData: any; // Full quote data for reference
  label?: string; // Optional custom label
}

interface OrderBuilderStatus {
  capStyle: {
    completed: boolean;
    items: {
      size: boolean;
      color: boolean;
      profile: boolean;
      shape: boolean;
      structure: boolean;
      fabric: boolean;
      stitch: boolean;
    };
    status: 'red' | 'yellow' | 'green';
  };
  customization: {
    completed: boolean;
    items: {
      logoSetup: boolean;
      accessories: boolean;
      moldCharges: boolean;
    };
    logoPositions: string[];
    status: 'empty' | 'yellow';
  };
  delivery: {
    completed: boolean;
    status: 'red' | 'green';
  };
  costBreakdown: {
    available: boolean;
    versions: QuoteVersion[];
    selectedVersionId: string | null;
  };
}

/**
 * Formats cap colors according to the simplified naming convention
 * @param frontCrown - Front crown color
 * @param backCrown - Back crown color  
 * @param bill - Bill color
 * @returns Simplified color format (e.g., "Bottomland/Black" instead of verbose format)
 */
function formatCapColors(frontCrown: string, backCrown: string, bill: string): string {
  // Handle null/undefined values
  const front = frontCrown || '';
  const back = backCrown || '';
  const billColor = bill || '';
  
  // If all parts are the same color, return single color (solid color)
  if (front === back && back === billColor && front) {
    return front;
  }
  
  // For multi-color caps, create simplified format
  const colors = [];
  
  // Collect unique colors in order of dominance
  // Front Crown, Bill, Upper Bill, Under Bill = First color
  if (front && !colors.includes(front)) {
    colors.push(front);
  }
  
  // Back, Button, Closure = Second color
  if (back && !colors.includes(back)) {
    colors.push(back);
  }
  
  // Bill color (if different from front and back)
  if (billColor && !colors.includes(billColor) && colors.length < 3) {
    colors.push(billColor);
  }
  
  // Return colors joined with "/" or fallback to first available color
  return colors.length > 1 ? colors.join('/') : (colors[0] || front || back || billColor || 'Standard');
}

export default function SupportPage() {
  const { user: authUser, loading: authLoading, isAuthenticated } = useAuth();
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [currentModel, setCurrentModel] = useState<string>('gpt-4o-mini');
  const [currentAssistant, setCurrentAssistant] = useState<any>(null);
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);
  const [conversationId, setConversationId] = useState<string | null>(null);
  const [sessionId] = useState<string>(() => `support-${Date.now()}-${Math.random().toString(36).substring(7)}`);
  // Guest contact information state
  const [guestContactInfo, setGuestContactInfo] = useState<GuestContactInfo | null>(null);
  const [showGuestContactForm, setShowGuestContactForm] = useState(false);
  const [pendingQuoteMessage, setPendingQuoteMessage] = useState<string | null>(null);
  const [conversations, setConversations] = useState<any[]>([]);
  const [showConversationHistory, setShowConversationHistory] = useState(true);
  const [isLoadingConversations, setIsLoadingConversations] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const chatContainerRef = useRef<HTMLDivElement>(null);
  const conversationsInitialized = useRef(false);
  
  // File upload state
  const [uploadedFiles, setUploadedFiles] = useState<string[]>([]);
  const [isUploading, setIsUploading] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // Lead Time Calculator State
  const [leadTimeData, setLeadTimeData] = useState<{
    leadTime?: {
      totalDays: number;
      deliveryDate: string;
      details: string[];
    };
    boxes?: {
      lines: Array<{
        label: string;
        count: number;
        pieces: number;
        dimensions: string;
        volume: number;
      }>;
      totalBoxes: number;
      netWeightKg: number;
      chargeableWeightKg: number;
    };
  } | null>(null);
  const [isCalculatingLeadTime, setIsCalculatingLeadTime] = useState(false);
  const [isOrderBuilderVisible, setIsOrderBuilderVisible] = useState(false);
  const [collapsedBlocks, setCollapsedBlocks] = useState({
    capStyle: true,
    customization: true,
    delivery: true,
    costBreakdown: true
  });
  const [currentQuoteData, setCurrentQuoteData] = useState<any>(null);
  const [orderBuilderStatus, setOrderBuilderStatus] = useState<OrderBuilderStatus>({
    capStyle: {
      completed: false,
      items: {
        size: false,
        color: false,
        profile: false,
        shape: false,
        structure: false,
        fabric: false,
        stitch: false
      },
      status: 'red'
    },
    customization: {
      completed: false,
      items: {
        logoSetup: false,
        accessories: false,
        moldCharges: false
      },
      logoPositions: [],
      status: 'empty'
    },
    delivery: {
      completed: false,
      status: 'red'
    },
    costBreakdown: {
      available: false,
      versions: [],
      selectedVersionId: null
    }
  });

  const scrollToBottom = () => {
    if (chatContainerRef.current) {
      // Scroll within the chat container only, smoothly
      chatContainerRef.current.scrollTo({
        top: chatContainerRef.current.scrollHeight,
        behavior: 'smooth'
      });
    }
  };

  useEffect(() => {
    // Only scroll if there are messages and it's not the initial load
    if (messages.length > 0) {
      // Use setTimeout to ensure DOM is updated
      setTimeout(scrollToBottom, 100);
    }
  }, [messages]);

  // Load user profile when auth user changes
  useEffect(() => {
    if (authUser?.email) {
      loadUserProfile();
    }
  }, [authUser]);

  const loadUserProfile = async () => {
    if (!authUser?.email) {
      return;
    }

    try {
      // The authUser already contains profile data, use it directly
      setUserProfile({
        id: authUser.id,
        name: authUser.name,
        email: authUser.email,
        phone: authUser.phone,
        company: authUser.company,
        address: null // Not available in AuthContext
      });
    } catch (error) {
      console.error('Failed to load user profile:', error);
    }
  };

  // Store conversation and messages in database
  const storeConversation = async (userMessage: Message, assistantMessage: Message, intent?: string, quoteData?: any) => {
    console.log('üîÑ storeConversation called with:', { 
      userMessage: userMessage.content.substring(0, 50), 
      assistantMessage: assistantMessage.content.substring(0, 50),
      intent,
      hasQuoteData: !!quoteData
    });
    
    try {
      const { data: { session } } = await supabase.auth.getSession();
      console.log('üìù storeConversation session check:', {
        hasSession: !!session,
        hasAccessToken: !!session?.access_token,
        userId: session?.user?.id
      });
      
      if (!session?.access_token) {
        console.log('‚ùå storeConversation: No session or access token');
        return;
      }

      const authHeaders: Record<string, string> = { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session.access_token}`
      };

      // Create or get conversation
      let currentConversationId = conversationId;
      
      if (!currentConversationId) {
        // Create new conversation
        const conversationResponse = await fetch('/api/conversations', {
          method: 'POST',
          headers: authHeaders,
          body: JSON.stringify({
            userId: session.user?.id,
            context: intent === 'ORDER_CREATION' ? 'QUOTE_REQUEST' : 'SUPPORT',
            metadata: {
              intent,
              hasQuoteData: !!quoteData,
              firstMessage: userMessage.content.substring(0, 100),
              orderBuilder: {
                capDetails: currentQuoteData?.capDetails,
                customization: currentQuoteData?.customization,
                delivery: currentQuoteData?.delivery,
                pricing: currentQuoteData?.pricing,
                orderBuilderStatus: orderBuilderStatus,
                timestamp: new Date().toISOString()
              },
              userProfile: {
                name: userProfile?.name || authUser?.name,
                email: userProfile?.email || authUser?.email,
                company: userProfile?.company,
                phone: userProfile?.phone,
                address: userProfile?.address
              },
              session: {
                sessionId: sessionId,
                uploadedFiles: uploadedFiles.length > 0 ? uploadedFiles : undefined,
                isGuest: !authUser
              }
            }
          })
        });

        if (conversationResponse.ok) {
          const newConversation = await conversationResponse.json();
          currentConversationId = newConversation.id;
          setConversationId(currentConversationId);
        } else {
          console.error('Failed to create conversation');
          return;
        }
      }

      // Store user message
      await fetch(`/api/conversations/${currentConversationId}/messages`, {
        method: 'POST',
        headers: authHeaders,
        body: JSON.stringify({
          role: 'USER',
          content: userMessage.content,
          metadata: userMessage.metadata
        })
      });

      // Store assistant message
      await fetch(`/api/conversations/${currentConversationId}/messages`, {
        method: 'POST',
        headers: authHeaders,
        body: JSON.stringify({
          role: 'ASSISTANT',
          content: assistantMessage.content,
          metadata: assistantMessage.metadata,
          model: assistantMessage.model
        })
      });

      // Generate and update conversation title with comprehensive context
      if (!conversationId) {
        try {
          console.log('üè∑Ô∏è Generating title for new conversation:', currentConversationId);
          
          const titleResponse = await fetch('/api/conversations/generate-title', {
            method: 'POST',
            headers: authHeaders,
            body: JSON.stringify({
              conversationId: currentConversationId,
              messages: [
                { role: userMessage.role, content: userMessage.content },
                { role: assistantMessage.role, content: assistantMessage.content }
              ],
              orderBuilder: {
                capDetails: currentQuoteData?.capDetails,
                customization: currentQuoteData?.customization,
                delivery: currentQuoteData?.delivery,
                quoteData: currentQuoteData
              },
              userProfile: {
                name: userProfile?.name || authUser?.name,
                company: userProfile?.company
              },
              conversationType: intent === 'ORDER_CREATION' ? 'quote_request' : 'support'
            })
          });

          if (titleResponse.ok) {
            const { title, success } = await titleResponse.json();
            console.log(`‚úÖ Title generated successfully: "${title}"`);
            
            // Refresh conversation list to show updated title
            loadUserConversations();
          } else {
            console.error('Failed to generate title:', await titleResponse.text());
          }
        } catch (error) {
          console.error('Failed to generate title:', error);
        }
      }

    } catch (error) {
      console.error('Failed to store conversation:', error);
    }
  };

  // Load all user conversations
  const loadUserConversations = async () => {
    // Prevent overlapping calls
    if (isLoadingConversations) {
      console.log('üîç loadUserConversations called but already loading, skipping...');
      return;
    }

    console.log('üîç loadUserConversations called (FIXED):', { 
      authUserId: authUser?.id, 
      authUserEmail: authUser?.email,
      hasAuthUser: !!authUser,
      conversationsInitialized: conversationsInitialized.current
    });
    
    setIsLoadingConversations(true);
    try {
      // Skip Supabase session check since we know user is authenticated from auth context
      // The API will handle authentication using cookies
      console.log('üì° SUPPORT PAGE: Making API request to /api/conversations with user context:', {
        authUserId: authUser?.id,
        isAuthenticated
      });

      const response = await fetch(`/api/conversations?limit=50`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include' // Include cookies for authentication
      });

      console.log('üì° API Response:', { 
        status: response.status, 
        ok: response.ok 
      });

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Conversations loaded:', { 
          count: data?.length || 0,
          conversations: data 
        });
        // Transform the data to match the expected format
        const transformedData = data.map((conv: any) => ({
          ...conv,
          preview: conv.lastMessage ? {
            content: conv.lastMessage.content,
            timestamp: conv.lastMessage.timestamp
          } : null
        }));
        setConversations(transformedData || []);
      } else {
        console.log('‚ùå API response not ok:', response.status, response.statusText);
        const errorData = await response.text();
        console.log('Error response body:', errorData);
        // Reset flag to allow retry
        conversationsInitialized.current = false;
      }
    } catch (error) {
      console.error('Failed to load user conversations:', error);
      // Reset flag to allow retry
      conversationsInitialized.current = false;
    } finally {
      setIsLoadingConversations(false);
    }
  };

  // Load conversation history on page load
  useEffect(() => {
    const loadConversationHistory = async () => {
      try {
        const response = await fetch('/api/support/conversation', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            sessionId: sessionId,
            userId: authUser?.id
          })
        });

        if (response.ok) {
          const data = await response.json();
          setConversationId(data.conversationId);
          
          // Load existing messages if any
          if (data.messages && data.messages.length > 0) {
            const formattedMessages = data.messages.map((msg: any) => ({
              id: msg.id,
              role: msg.role,
              content: msg.content,
              model: msg.metadata?.model,
              timestamp: new Date(msg.createdAt),
              metadata: msg.metadata
            }));
            setMessages(formattedMessages);
          }
        }
      } catch (error) {
        console.error('Failed to load conversation history:', error);
        // Continue without conversation history
      }
    };

    // Only load conversation after auth is settled
    console.log('üîÑ useEffect triggered:', { 
      authLoading, 
      sessionId, 
      authUserId: authUser?.id,
      isAuthenticated,
      willLoadConversations: !authLoading
    });
    
    if (!authLoading) {
      loadConversationHistory();
    }
  }, [authLoading, sessionId]);

  // Reset conversations when user changes
  useEffect(() => {
    if (authUser?.id) {
      // Reset flag when user changes to allow loading new user's conversations
      conversationsInitialized.current = false;
      setConversations([]);
    }
  }, [authUser?.id]);

  // Single effect to handle authenticated conversation loading
  useEffect(() => {
    const checkAndLoadConversations = async () => {
      // Only load conversations when:
      // 1. Auth is settled (not loading)
      // 2. User is authenticated 
      // 3. We have a user ID
      // 4. Not currently loading conversations
      // 5. Haven't initialized conversations yet (prevent re-loading)
      console.log('üîç SUPPORT PAGE: Checking conversation loading conditions:', {
        authLoading,
        isAuthenticated,
        hasUserId: !!authUser?.id,
        userEmail: authUser?.email,
        conversationsInitialized: conversationsInitialized.current,
        shouldLoad: !authLoading && isAuthenticated && authUser?.id && !conversationsInitialized.current
      });

      if (!authLoading && isAuthenticated && authUser?.id && !conversationsInitialized.current) {
        console.log('üîÑ SUPPORT PAGE: User authenticated, loading conversations immediately for:', authUser.email);
        conversationsInitialized.current = true;
        await loadUserConversations();
      } else if (!authLoading && !isAuthenticated) {
        console.log('üö´ SUPPORT PAGE: User not authenticated, clearing conversations');
        conversationsInitialized.current = true;
        setConversations([]);
      } else {
        console.log('‚ùì SUPPORT PAGE: Not loading conversations because:', {
          authLoading: authLoading ? 'Auth is still loading' : null,
          notAuthenticated: !isAuthenticated ? 'User not authenticated' : null,
          noUserId: !authUser?.id ? 'No user ID' : null,
          alreadyInitialized: conversationsInitialized.current ? 'Already initialized' : null
        });
      }
    };
    
    checkAndLoadConversations();
  }, [authLoading, isAuthenticated, authUser?.id]);

  // Handle file upload
  const handleFileUpload = async (files: FileList) => {
    if (!files.length) return;
    
    setIsUploading(true);
    const uploadedUrls: string[] = [];
    
    try {
      for (const file of Array.from(files)) {
        // Validate file type and size - support images and PDFs
        const allowedTypes = [
          'image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml',
          'application/pdf', 'application/illustrator', 'application/postscript', 
          'image/eps', 'text/plain'
        ];
        
        if (!allowedTypes.includes(file.type)) {
          alert(`${file.name} is not a supported file type. Supported formats: PNG, JPG, GIF, WEBP, SVG, PDF, AI, EPS, TXT`);
          continue;
        }
        
        if (file.size > 10 * 1024 * 1024) { // 10MB limit
          alert(`${file.name} is too large. Maximum size is 10MB`);
          continue;
        }
        
        // Upload to your existing upload API
        const formData = new FormData();
        formData.append('file', file);
        
        const uploadResponse = await fetch('/api/upload', {
          method: 'POST',
          body: formData,
        });
        
        if (uploadResponse.ok) {
          const uploadResult = await uploadResponse.json();
          // Fix: Access the correct nested URL property
          if (uploadResult.success && uploadResult.file && uploadResult.file.url) {
            uploadedUrls.push(uploadResult.file.url);
            console.log('File uploaded successfully:', uploadResult.file.url);
          } else {
            console.error('Upload response missing file URL:', uploadResult);
            alert(`Upload succeeded but no URL returned for ${file.name}`);
          }
        } else {
          const errorData = await uploadResponse.json();
          console.error('Failed to upload', file.name, errorData);
          alert(`Failed to upload ${file.name}: ${errorData.error || 'Unknown error'}`);
        }
      }
      
      setUploadedFiles(prev => [...prev, ...uploadedUrls]);
    } catch (error) {
      console.error('Upload error:', error);
      alert('Failed to upload files');
    } finally {
      setIsUploading(false);
    }
  };

  // Trigger file input
  const triggerFileUpload = () => {
    fileInputRef.current?.click();
  };

  const sendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if ((!inputMessage.trim() && uploadedFiles.length === 0) || isLoading || isUploading) return;

    // Check if this is a guest user trying to create a quote
    if (!authUser && !guestContactInfo) {
      // Check if the message contains quote-related keywords
      const quoteKeywords = ['quote', 'price', 'cost', 'order', 'custom cap', 'hat', 'embroidery', 'logo', 'design', 'bulk'];
      const messageContainsQuoteKeywords = quoteKeywords.some(keyword => 
        inputMessage.toLowerCase().includes(keyword)
      );
      
      if (messageContainsQuoteKeywords || uploadedFiles.length > 0) {
        // Store the message to send after contact form is completed
        setPendingQuoteMessage(inputMessage);
        setShowGuestContactForm(true);
        return;
      }
    }

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: inputMessage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      const { data: { session } } = await supabase.auth.getSession();
      const authHeaders: Record<string, string> = { 'Content-Type': 'application/json' };
      if (session?.access_token) {
        authHeaders['Authorization'] = `Bearer ${session.access_token}`;
      }

      // Step 1: Intent detection with GPT-4o Mini
      // Force LOGO_ANALYSIS intent if files are uploaded (images should always go to LogoCraft Pro)
      let detectedIntent = null;
      let recommendedModel = null;
      let selectedAssistant = null;
      
      // Check if this is a message with new file uploads (force logo analysis)
      // or a follow-up message (allow normal intent detection for quotes/orders)
      const hasNewFiles = uploadedFiles.length > 0;
      
      if (hasNewFiles) {
        console.log('üñºÔ∏è Files uploaded, forcing LOGO_ANALYSIS intent');
        detectedIntent = 'LOGO_ANALYSIS';
        selectedAssistant = {
          id: 'logo-expert',
          name: 'LogoCraft Pro',
          displayName: 'LogoCraft Pro üé®',
          color: 'lime',
          colorHex: '#84cc16',
          icon: 'üé®',
          specialty: 'Logo Analysis & Customization Expert'
        };
        recommendedModel = 'gpt-4o';
      } else {
        // Regular intent detection for text-only messages
        const intentResponse = await fetch('/api/support/intent', {
          method: 'POST',
          headers: authHeaders,
          body: JSON.stringify({ 
            message: inputMessage,
            conversationHistory: messages.slice(-5), // Last 5 messages for context
            userId: authUser?.id
          })
        });

        const intentData = await intentResponse.json();
        detectedIntent = intentData.intent;
        recommendedModel = intentData.model;
        selectedAssistant = intentData.assistant;
      }

      // Add system message about routing
      const routingMessage: Message = {
        id: Date.now().toString() + '_routing',
        role: 'system',
        content: uploadedFiles.length > 0 
          ? `üñºÔ∏è Image analysis ‚Äî Routing to ${selectedAssistant?.displayName || 'LogoCraft Pro üé®'} for logo analysis`
          : `Model switch ‚Äî Routed to ${selectedAssistant?.displayName || recommendedModel.toUpperCase()}`,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, routingMessage]);

      setCurrentModel(recommendedModel);
      setCurrentAssistant(selectedAssistant);

      // Set Order Builder visibility based on intent
      setIsOrderBuilderVisible(detectedIntent === 'ORDER_CREATION');
      
      // Step 2: Send to appropriate model with conversation context
      let apiEndpoint = '/api/support/public-queries'; // Default to SupportSage
      
      if (detectedIntent === 'ORDER_CREATION') {
        apiEndpoint = '/api/support/order-creation'; // CapCraft AI
      } else if (detectedIntent === 'LOGO_ANALYSIS') {
        apiEndpoint = '/api/support/logo-analysis'; // LogoCraft Pro
      }
      
      // Debug log to see what's being sent
      console.log('üöÄ Sending request with files:', {
        uploadedFiles: uploadedFiles,
        uploadedFilesLength: uploadedFiles.length,
        uploadedFilesType: typeof uploadedFiles,
        uploadedFilesArray: Array.isArray(uploadedFiles),
        firstFile: uploadedFiles[0],
        allFiles: uploadedFiles,
        hasValidUrls: uploadedFiles.filter(url => url && typeof url === 'string' && url.length > 0).length,
        apiEndpoint: apiEndpoint
      });
      
      // Filter out any null/undefined values from uploaded files
      const validUploadedFiles = uploadedFiles.filter(url => url && typeof url === 'string' && url.length > 0);
      
      const response = await fetch(apiEndpoint, {
        method: 'POST',
        headers: authHeaders,
        body: JSON.stringify({
          message: inputMessage,
          intent: detectedIntent,
          conversationHistory: messages,
          userProfile: userProfile || (guestContactInfo ? {
            name: guestContactInfo.name,
            email: guestContactInfo.email,
            phone: guestContactInfo.phone,
            address: guestContactInfo.address,
            company: guestContactInfo.company
          } : null),
          conversationId: conversationId,
          sessionId: sessionId,
          attachedFiles: validUploadedFiles.length > 0 ? validUploadedFiles : undefined
        })
      });

      const data = await response.json();

      // Handle structured quote data vs regular messages
      let displayContent = data.message;
      let extractedQuoteData = data.quoteData;
      
      // Debug logging to see what we're getting from the API
      console.log('API Response data:', {
        hasQuoteData: !!data.quoteData,
        detectedIntent,
        messageLength: data.message?.length || 0,
        quoteDataKeys: data.quoteData ? Object.keys(data.quoteData) : null,
        messageContent: data.message?.substring(0, 200) + '...'
      });
      
      // Fallback: Try to extract quote data from AI message if no structured data
      if (!extractedQuoteData && data.message && detectedIntent === 'ORDER_CREATION') {
        extractedQuoteData = parseQuoteFromMessage(data.message);
        console.log('Extracted quote data from message:', extractedQuoteData);
      }
      
      if (extractedQuoteData && detectedIntent === 'ORDER_CREATION') {
        // Format quote data for display
        displayContent = formatQuoteDisplay(data.message, extractedQuoteData);
      }

      const assistantMessage: Message = {
        id: Date.now().toString() + '_assistant',
        role: 'assistant',
        content: displayContent,
        model: recommendedModel,
        timestamp: new Date(),
        metadata: { ...data.metadata, quoteData: extractedQuoteData }
      };

      setMessages(prev => [...prev, assistantMessage]);
      
      // Store conversation and messages in database
      await storeConversation(userMessage, assistantMessage, detectedIntent, extractedQuoteData);
      
      // Update order builder status if quote data is available
      if (extractedQuoteData && detectedIntent === 'ORDER_CREATION') {
        setCurrentQuoteData(extractedQuoteData);
        updateOrderBuilderStatus(extractedQuoteData);
      }

      // Refresh conversation list to update timestamps and message counts
      if (authUser?.id) {
        // Directly call loadUserConversations without resetting flag
        // to avoid triggering the useEffect loop
        await loadUserConversations();
      }
      
      // Only clear uploaded files after successful message send
      setUploadedFiles([]);
    } catch (error) {
      console.error('Error sending message:', error);
      const errorMessage: Message = {
        id: Date.now().toString() + '_error',
        role: 'assistant',
        content: 'Sorry, I encountered an error. Please try again.',
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
      // Don't clear uploaded files on error - user might want to retry
    } finally {
      setIsLoading(false);
    }
  };

  const getModelBadgeColor = (model?: string) => {
    if (currentAssistant?.color === 'emerald') {
      return 'border-emerald-400/30 bg-emerald-400/10 text-emerald-300';
    } else if (currentAssistant?.color === 'blue') {
      return 'border-blue-400/30 bg-blue-400/10 text-blue-300';
    }
    return 'border-teal-400/30 bg-teal-400/10 text-teal-300';
  };

  const updateOrderBuilderStatus = (quoteData: any) => {
    console.log('updateOrderBuilderStatus called with:', {
      hasQuoteData: !!quoteData,
      hasPricing: !!(quoteData?.pricing),
      pricingTotal: quoteData?.pricing?.total,
      capDetails: quoteData?.capDetails,
      customization: quoteData?.customization,
      delivery: quoteData?.delivery
    });
    
    const { capDetails, customization, delivery, pricing } = quoteData;
    
    // Update cap style status
    const capStyleItems = {
      size: !!(capDetails?.sizes && capDetails.sizes.length > 0),
      color: !!(capDetails?.colors && capDetails.colors.length > 0),
      profile: !!capDetails?.profile,
      shape: !!capDetails?.billShape,
      structure: !!capDetails?.structure,
      fabric: !!capDetails?.fabric,
      stitch: !!capDetails?.closure // Using closure as stitch reference
    };
    
    const compulsoryCapItems = capStyleItems.size && capStyleItems.color && capStyleItems.shape;
    const allCapItems = Object.values(capStyleItems).every(item => item);
    
    let capStyleStatus: 'red' | 'yellow' | 'green' = 'red';
    if (allCapItems) {
      capStyleStatus = 'green';
    } else if (compulsoryCapItems) {
      capStyleStatus = 'yellow';
    }
    
    // Update customization status
    const customizationItems = {
      logoSetup: !!(customization?.logos && customization.logos.length > 0),
      accessories: !!(customization?.accessories && customization.accessories.length > 0),
      moldCharges: !!(customization?.totalMoldCharges !== undefined)
    };
    
    const logoPositions = customization?.logos?.map((logo: any) => logo.location) || [];
    const hasCustomization = Object.values(customizationItems).some(item => item);
    
    // Update delivery status
    const deliveryCompleted = !!(delivery?.method && delivery?.totalCost !== undefined);
    
    // Update cost breakdown status - now manages versions
    const costBreakdownAvailable = !!(pricing && pricing.total !== undefined);
    
    setOrderBuilderStatus(prev => {
      let newVersions = [...prev.costBreakdown.versions];
      let selectedVersionId = prev.costBreakdown.selectedVersionId;
      
      if (costBreakdownAvailable) {
        // Check if this is a new quote (different total or customization)
        const isDifferentQuote = !newVersions.some(v => 
          v.pricing.total === pricing.total && 
          v.pricing.logosCost === pricing.logosCost &&
          v.pricing.baseProductCost === pricing.baseProductCost
        );
        
        if (isDifferentQuote) {
          // Generate a descriptive label based on the quote differences
          const label = generateQuoteLabel(quoteData, newVersions.length + 1);
          
          const newVersion: QuoteVersion = {
            id: `version_${Date.now()}_${newVersions.length + 1}`,
            version: newVersions.length + 1,
            timestamp: new Date(),
            pricing: {
              baseProductCost: pricing.baseProductCost || 0,
              logosCost: pricing.logosCost || 0,
              deliveryCost: pricing.deliveryCost || 0,
              total: pricing.total || 0,
              quantity: pricing.quantity || 1
            },
            quoteData: quoteData,
            label: label
          };
          
          newVersions.push(newVersion);
          selectedVersionId = newVersion.id; // Auto-select the latest version
        }
      }
      
      return {
        capStyle: {
          completed: allCapItems,
          items: capStyleItems,
          status: capStyleStatus
        },
        customization: {
          completed: hasCustomization,
          items: customizationItems,
          logoPositions: logoPositions,
          status: hasCustomization ? 'yellow' : 'empty'
        },
        delivery: {
          completed: deliveryCompleted,
          status: deliveryCompleted ? 'green' : 'red'
        },
        costBreakdown: {
          available: newVersions.length > 0,
          versions: newVersions,
          selectedVersionId: selectedVersionId
        }
      };
    });
  };
  
  // Helper function to generate descriptive labels for quote versions
  const parseQuoteFromMessage = (message: string): any => {
    try {
      // Extract key pricing information from the AI message
      const priceRegex = /Total Order:\s*\$([0-9,]+\.?\d*)/i;
      const quantityRegex = /(\d+)\s*pieces?/i;
      const blankCapRegex = /Blank Cap[s]?.*?:\s*\$([0-9,]+\.?\d*)/i;
      const customizationRegex = /Customization.*?:\s*\$([0-9,]+\.?\d*)/i;
      const deliveryRegex = /Delivery.*?:\s*\$([0-9,]+\.?\d*)/i;
      
      const totalMatch = message.match(priceRegex);
      const quantityMatch = message.match(quantityRegex);
      const blankCapMatch = message.match(blankCapRegex);
      const customizationMatch = message.match(customizationRegex);
      const deliveryMatch = message.match(deliveryRegex);
      
      if (!totalMatch || !quantityMatch) {
        return null;
      }
      
      const total = parseFloat(totalMatch[1].replace(/,/g, ''));
      const quantity = parseInt(quantityMatch[1]);
      const blankCapCost = blankCapMatch ? parseFloat(blankCapMatch[1].replace(/,/g, '')) : 0;
      const customizationCost = customizationMatch ? parseFloat(customizationMatch[1].replace(/,/g, '')) : 0;
      const deliveryCost = deliveryMatch ? parseFloat(deliveryMatch[1].replace(/,/g, '')) : 0;
      
      // Extract product details
      const productRegex = /(?:Product:|Cap).*?(\w+.*?(?:Cap|112|Era))/i;
      const productMatch = message.match(productRegex);
      const productName = productMatch ? productMatch[1].trim() : 'Custom Cap';
      
      // Extract logo information
      const logoTypes = [];
      if (message.includes('3D Embroidery')) {
        logoTypes.push({location: 'Front', type: 'Large 3D Embroidery', size: 'Large'});
      }
      if (message.includes('Rubber Patch')) {
        logoTypes.push({location: 'Front', type: 'Large Rubber Patch', size: 'Large'});
      }
      if (message.includes('Flat Embroidery')) {
        logoTypes.push({location: 'Back', type: 'Small Flat Embroidery', size: 'Small'});
        logoTypes.push({location: 'Left', type: 'Small Flat Embroidery', size: 'Small'});
      }
      
      return {
        capDetails: {
          productName: productName,
          profile: 'High',
          structure: 'Structured',
          colors: ['Black'],
          closure: 'Snapback'
        },
        customization: {
          logos: logoTypes,
          accessories: [],
          totalMoldCharges: message.includes('Mold Charge') ? 80 : 0
        },
        delivery: {
          method: 'Regular Delivery',
          leadTime: '4-6 days',
          totalCost: deliveryCost
        },
        pricing: {
          quantity: quantity,
          baseProductCost: blankCapCost,
          logosCost: customizationCost,
          deliveryCost: deliveryCost,
          total: total
        }
      };
    } catch (error) {
      console.error('Error parsing quote from message:', error);
      return null;
    }
  };

  const generateQuoteLabel = (quoteData: any, versionNumber: number): string => {
    const { customization } = quoteData;
    
    if (customization?.logos && customization.logos.length > 0) {
      // Find the primary logo (usually front)
      const frontLogo = customization.logos.find((logo: any) => 
        logo.location?.toLowerCase().includes('front')
      );
      
      if (frontLogo) {
        const logoType = frontLogo.type || 'logo';
        if (logoType.toLowerCase().includes('3d')) {
          return `3D Embroidery Front`;
        } else if (logoType.toLowerCase().includes('rubber')) {
          return `Rubber Patch Front`;
        } else if (logoType.toLowerCase().includes('flat')) {
          return `Flat Embroidery Front`;
        }
      }
    }
    
    return `Version ${versionNumber}`;
  };
  
  // Function to select a specific quote version
  const selectQuoteVersion = (versionId: string) => {
    setOrderBuilderStatus(prev => ({
      ...prev,
      costBreakdown: {
        ...prev.costBreakdown,
        selectedVersionId: versionId
      }
    }));
  };
  
  // Get the currently selected version
  const getSelectedVersion = (): QuoteVersion | null => {
    const { versions, selectedVersionId } = orderBuilderStatus.costBreakdown;
    return versions.find(v => v.id === selectedVersionId) || null;
  };

  const formatQuoteDisplay = (message: string, quoteData: any) => {
    if (!quoteData) return message;

    const { capDetails, customization, delivery, pricing } = quoteData;
    
    return `${message}

**üìã Quote Details:**
‚Ä¢ **Product:** ${capDetails?.productName || 'Custom Cap'}
‚Ä¢ **Quantity:** ${pricing?.quantity || 0} pieces
‚Ä¢ **Profile:** ${capDetails?.profile || 'High'} | **Structure:** ${capDetails?.structure || 'Structured'}
‚Ä¢ **Colors:** ${capDetails?.colors?.join(', ') || 'Standard'}
‚Ä¢ **Closure:** ${capDetails?.closure || 'Snapback'}

**‚ú® Customization:**
${customization?.logos?.map((logo: any) => `‚Ä¢ ${logo.location}: ${logo.type} (${logo.size})`).join('\n') || '‚Ä¢ Standard setup'}

**üöö Delivery:**
‚Ä¢ **Method:** ${delivery?.method || 'Standard'}
‚Ä¢ **Lead Time:** ${delivery?.leadTime || '2-3 weeks'}

**üí∞ Pricing Breakdown:**
‚Ä¢ **Base Cost:** $${pricing?.baseProductCost?.toFixed(2) || '0.00'} (${pricing?.quantity}pc √ó $${(pricing?.baseProductCost / pricing?.quantity || 0).toFixed(2)})
‚Ä¢ **Customization:** $${pricing?.logosCost?.toFixed(2) || '0.00'} (${pricing?.quantity}pc √ó $${(pricing?.logosCost / pricing?.quantity || 0).toFixed(2)})
‚Ä¢ **Delivery:** $${pricing?.deliveryCost?.toFixed(2) || '0.00'} (${pricing?.quantity}pc √ó $${(pricing?.deliveryCost / pricing?.quantity || 0).toFixed(2)})
‚Ä¢ **Total:** $${pricing?.total?.toFixed(2) || '0.00'} ($${((pricing?.total || 0) / (pricing?.quantity || 1)).toFixed(2)} per cap)

Would you like me to save this quote or would you like to modify any specifications?

**Ready to proceed?** Click the **"Quote Order"** button below to save this quote for future reference.`;
  };

  // Lead Time and Box Calculator Function
  const calculateLeadTime = async () => {
    const selectedVersion = getSelectedVersion();
    if (!selectedVersion) return;

    setIsCalculatingLeadTime(true);
    try {
      // Extract data from the selected quote version
      const quoteData = selectedVersion.quoteData;
      const leadTimeStr = quoteData?.delivery?.leadTime || ": 1 week (Blank), 2 weeks (Decorated)";
      const logoSetup = quoteData?.customization?.logoSetup || "Blank";
      const deliveryType = quoteData?.delivery?.method || "Regular";
      const totalQuantity = selectedVersion.pricing.quantity || 0;
      
      // Extract lines from quote data (color/size breakdown)
      const lines = quoteData?.capDetails?.lines || [];
      
      // Extract accessories and cap setup
      const accessoriesSelections = quoteData?.customization?.accessories || [];
      const capSetupSelections = quoteData?.customization?.capSetup || [];

      const requestData = {
        leadTimeStr,
        logoSetup,
        deliveryType,
        totalQuantity,
        lines,
        accessoriesSelections,
        capSetupSelections,
        piecesPerBox: 48, // Default
        todayDate: new Date().toISOString().split('T')[0]
      };

      const response = await fetch('/api/support/lead-time-calculator', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      });

      if (!response.ok) {
        throw new Error('Failed to calculate lead time');
      }

      const result = await response.json();
      setLeadTimeData(result);
    } catch (error) {
      console.error('Lead time calculation error:', error);
      // You could add error state here if needed
    } finally {
      setIsCalculatingLeadTime(false);
    }
  };

  // Auto-calculate when a quote version is selected
  useEffect(() => {
    if (orderBuilderStatus.costBreakdown.available && orderBuilderStatus.costBreakdown.selectedVersionId) {
      calculateLeadTime();
    } else {
      setLeadTimeData(null);
    }
  }, [orderBuilderStatus.costBreakdown.selectedVersionId]);

  // Auto-update conversation metadata when Order Builder data changes
  useEffect(() => {
    // Only update if we have an active conversation and significant data changes
    if (conversationId && currentQuoteData) {
      // Use a debounce approach to avoid too frequent updates
      const timeoutId = setTimeout(() => {
        updateConversationMetadata();
      }, 2000); // 2 second debounce

      return () => clearTimeout(timeoutId);
    }
  }, [conversationId, currentQuoteData, orderBuilderStatus, userProfile]);

  // Function to toggle individual block collapse
  const toggleBlockCollapse = (blockName: keyof typeof collapsedBlocks) => {
    setCollapsedBlocks(prev => ({
      ...prev,
      [blockName]: !prev[blockName]
    }));
  };

  // Helper functions for action buttons
  const canQuoteOrder = () => {
    return orderBuilderStatus.capStyle.status !== 'red' && orderBuilderStatus.delivery.completed;
  };

  const canPlaceOrder = () => {
    return orderBuilderStatus.capStyle.completed && orderBuilderStatus.delivery.completed;
  };

  const handleQuoteOrder = async () => {
    if (!canQuoteOrder()) return;
    
    try {
      // Get the selected quote version data
      const selectedVersion = getSelectedVersion();
      
      if (!selectedVersion) {
        console.error('No selected quote version available');
        return;
      }

      const { data: { session } } = await supabase.auth.getSession();
      const authHeaders: Record<string, string> = { 'Content-Type': 'application/json' };
      if (session?.access_token) {
        authHeaders['Authorization'] = `Bearer ${session.access_token}`;
      }

      const response = await fetch('/api/support/save-quote', {
        method: 'POST',
        headers: authHeaders,
        body: JSON.stringify({
          quoteData: selectedVersion.quoteData,
          conversationId: conversationId,
          sessionId: sessionId,
          userProfile: userProfile || (guestContactInfo ? {
            name: guestContactInfo.name,
            email: guestContactInfo.email,
            phone: guestContactInfo.phone,
            address: guestContactInfo.address,
            company: guestContactInfo.company
          } : null),
          uploadedFiles: uploadedFiles
        })
      });

      if (response.ok) {
        const data = await response.json();
        
        // Add success message to chat
        const successMessage: Message = {
          id: Date.now().toString() + '_quote_success',
          role: 'assistant',
          content: `‚úÖ **Quote saved successfully!** Reference ID: ${data.quoteId}\n\nYour quote has been saved and you can reference it using the ID above. You can continue to modify specifications or proceed to place the order when ready.`,
          timestamp: new Date(),
          metadata: { quoteId: data.quoteId }
        };
        
        setMessages(prev => [...prev, successMessage]);
        
        // Store the quote submission in conversation if available
        if (conversationId) {
          try {
            await updateConversationMetadata();
            
            // Also store this as a message in the conversation
            const { data: { session } } = await supabase.auth.getSession();
            if (session?.access_token) {
              const authHeaders: Record<string, string> = { 
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${session.access_token}`
              };

              await fetch(`/api/conversations/${conversationId}/messages`, {
                method: 'POST',
                headers: authHeaders,
                body: JSON.stringify({
                  role: 'SYSTEM',
                  content: `Quote submitted: ${data.quoteId}`,
                  metadata: {
                    type: 'quote_submission',
                    quoteId: data.quoteId,
                    quoteData: selectedVersion.quoteData,
                    timestamp: new Date().toISOString()
                  }
                })
              });
            }
          } catch (error) {
            console.error('Failed to store quote in conversation:', error);
          }
        }
      } else {
        throw new Error('Failed to save quote');
      }
    } catch (error) {
      console.error('Error saving quote:', error);
      
      // Add error message to chat
      const errorMessage: Message = {
        id: Date.now().toString() + '_quote_error',
        role: 'assistant',
        content: '‚ùå **Failed to save quote.** Please try again or contact support if the issue persists.',
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, errorMessage]);
    }
  };

  const handlePlaceOrder = async () => {
    if (!canPlaceOrder()) return;
    
    try {
      // Get the selected quote version data
      const selectedVersion = getSelectedVersion();
      
      if (!selectedVersion) {
        console.error('No selected quote version available');
        return;
      }

      const { data: { session } } = await supabase.auth.getSession();
      const authHeaders: Record<string, string> = { 'Content-Type': 'application/json' };
      if (session?.access_token) {
        authHeaders['Authorization'] = `Bearer ${session.access_token}`;
      }

      const response = await fetch('/api/support/place-order', {
        method: 'POST',
        headers: authHeaders,
        body: JSON.stringify({
          quoteData: selectedVersion.quoteData,
          conversationId: conversationId,
          sessionId: sessionId,
          userProfile: userProfile || (guestContactInfo ? {
            name: guestContactInfo.name,
            email: guestContactInfo.email,
            phone: guestContactInfo.phone,
            address: guestContactInfo.address,
            company: guestContactInfo.company
          } : null),
          uploadedFiles: uploadedFiles
        })
      });

      if (response.ok) {
        const data = await response.json();
        
        // Add success message to chat
        const successMessage: Message = {
          id: Date.now().toString() + '_order_success',
          role: 'assistant',
          content: `üéâ **Order placed successfully!** Order ID: ${data.orderId}\n\n**Next Steps:**\n‚Ä¢ You'll receive an order confirmation email shortly\n‚Ä¢ Our team will review your specifications\n‚Ä¢ Production will begin once payment is processed\n‚Ä¢ You can track your order status in your dashboard\n\nThank you for choosing US Custom Cap!`,
          timestamp: new Date(),
          metadata: { orderId: data.orderId }
        };
        
        setMessages(prev => [...prev, successMessage]);
        
        // Store the order placement in conversation if available
        if (conversationId) {
          try {
            await updateConversationMetadata();
            
            // Also store this as a message in the conversation
            const { data: { session } } = await supabase.auth.getSession();
            if (session?.access_token) {
              const authHeaders: Record<string, string> = { 
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${session.access_token}`
              };

              await fetch(`/api/conversations/${conversationId}/messages`, {
                method: 'POST',
                headers: authHeaders,
                body: JSON.stringify({
                  role: 'SYSTEM',
                  content: `Order placed: ${data.orderId}`,
                  metadata: {
                    type: 'order_placement',
                    orderId: data.orderId,
                    quoteData: selectedVersion.quoteData,
                    timestamp: new Date().toISOString()
                  }
                })
              });
            }
          } catch (error) {
            console.error('Failed to store order in conversation:', error);
          }
        }
      } else {
        throw new Error('Failed to place order');
      }
    } catch (error) {
      console.error('Error placing order:', error);
      
      // Add error message to chat
      const errorMessage: Message = {
        id: Date.now().toString() + '_order_error',
        role: 'assistant',
        content: '‚ùå **Failed to place order.** Please try again or contact support if the issue persists.',
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, errorMessage]);
    }
  };

  // Load a specific conversation
  const loadConversation = async (conversationId: string) => {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      const authHeaders: Record<string, string> = { 'Content-Type': 'application/json' };
      if (session?.access_token) {
        authHeaders['Authorization'] = `Bearer ${session.access_token}`;
      }

      const response = await fetch(`/api/conversations/${conversationId}`, {
        method: 'GET',
        headers: authHeaders
      });

      if (response.ok) {
        const data = await response.json();
        setConversationId(data.id);
        
        // Load existing messages
        if (data.ConversationMessage && data.ConversationMessage.length > 0) {
          const formattedMessages = data.ConversationMessage.map((msg: any) => ({
            id: msg.id,
            role: msg.role.toLowerCase(),
            content: msg.content,
            model: msg.model,
            timestamp: new Date(msg.createdAt),
            metadata: msg.metadata
          }));
          setMessages(formattedMessages);
        } else {
          setMessages([]);
        }
        
        // Restore Order Builder state from conversation metadata
        if (data.metadata && data.metadata.orderBuilder) {
          const orderBuilder = data.metadata.orderBuilder;
          
          console.log('üîÑ Restoring Order Builder state from conversation:', orderBuilder);
          
          // Restore quote data
          if (orderBuilder.capDetails || orderBuilder.customization || orderBuilder.delivery) {
            const restoredQuoteData = {
              capDetails: orderBuilder.capDetails,
              customization: orderBuilder.customization,
              delivery: orderBuilder.delivery,
              pricing: orderBuilder.pricing
            };
            
            setCurrentQuoteData(restoredQuoteData);
            setIsOrderBuilderVisible(true);
          }
          
          // Restore order builder status if available
          if (orderBuilder.orderBuilderStatus) {
            setOrderBuilderStatus(orderBuilder.orderBuilderStatus);
          }
          
          // Restore quote versions if available
          if (orderBuilder.quoteVersions && orderBuilder.quoteVersions.length > 0) {
            setOrderBuilderStatus(prev => ({
              ...prev,
              costBreakdown: {
                ...prev.costBreakdown,
                available: true,
                versions: orderBuilder.quoteVersions,
                selectedVersionId: orderBuilder.quoteVersions[0]?.id || prev.costBreakdown.selectedVersionId
              }
            }));
          }
        }
        
        // Restore user profile if available
        if (data.metadata && data.metadata.userProfile) {
          const savedProfile = data.metadata.userProfile;
          if (savedProfile.name || savedProfile.email || savedProfile.company) {
            setUserProfile(savedProfile);
          }
        }
        
        setShowConversationHistory(false);
        console.log('‚úÖ Conversation loaded successfully:', data.id);
      }
    } catch (error) {
      console.error('Failed to load specific conversation:', error);
    }
  };

  // Start a new conversation
  const startNewConversation = () => {
    const newSessionId = `support-${Date.now()}-${Math.random().toString(36).substring(7)}`;
    setMessages([]);
    setConversationId(null);
    setCurrentQuoteData(null);
    setIsOrderBuilderVisible(false);
    setOrderBuilderStatus({
      capStyle: {
        completed: false,
        items: {
          size: false,
          color: false,
          profile: false,
          shape: false,
          structure: false,
          fabric: false,
          stitch: false
        },
        status: 'red'
      },
      customization: {
        completed: false,
        items: {
          logoSetup: false,
          accessories: false,
          moldCharges: false
        },
        logoPositions: [],
        status: 'empty'
      },
      delivery: {
        completed: false,
        status: 'red'
      },
      costBreakdown: {
        available: false,
        versions: [],
        selectedVersionId: null
      }
    });
    
    // Create new conversation
    fetch('/api/support/conversation', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        sessionId: newSessionId,
        userId: authUser?.id
      })
    }).then(response => response.json())
    .then(data => {
      setConversationId(data.conversationId);
    })
    .catch(error => {
      console.error('Failed to create new conversation:', error);
    });
  };

  // Delete a conversation
  const deleteConversation = async (conversationIdToDelete: string) => {
    if (!confirm('Are you sure you want to delete this conversation? This action cannot be undone.')) {
      return;
    }
    
    try {
      const { data: { session } } = await supabase.auth.getSession();
      const authHeaders: Record<string, string> = { 'Content-Type': 'application/json' };
      if (session?.access_token) {
        authHeaders['Authorization'] = `Bearer ${session.access_token}`;
      }

      const response = await fetch(`/api/conversations/${conversationIdToDelete}`, {
        method: 'DELETE',
        headers: authHeaders
      });

      if (response.ok) {
        // Refresh conversation list without resetting flag
        await loadUserConversations();
        
        // If the deleted conversation was the current one, start a new conversation
        if (conversationId === conversationIdToDelete) {
          startNewConversation();
        }
      }
    } catch (error) {
      console.error('Failed to delete conversation:', error);
    }
  };

  // Regenerate conversation title using AI
  const regenerateConversationTitle = async (conversationIdToUpdate: string) => {
    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.access_token) return;

      const authHeaders: Record<string, string> = { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session.access_token}`
      };

      console.log('üîÑ Regenerating title for conversation:', conversationIdToUpdate);

      const response = await fetch(`/api/conversations/generate-title?conversationId=${conversationIdToUpdate}`, {
        method: 'GET',
        headers: authHeaders
      });

      if (response.ok) {
        const { title } = await response.json();
        console.log('‚úÖ Title regenerated:', title);
        
        // Refresh conversation list to show updated title
        await loadUserConversations();
      } else {
        console.error('Failed to regenerate title:', await response.text());
      }
    } catch (error) {
      console.error('Error regenerating title:', error);
    }
  };

  // Update conversation metadata with current Order Builder data
  const updateConversationMetadata = async () => {
    if (!conversationId) return;

    try {
      const { data: { session } } = await supabase.auth.getSession();
      if (!session?.access_token) return;

      const authHeaders: Record<string, string> = { 
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${session.access_token}`
      };

      console.log('üìù Updating conversation metadata:', conversationId);

      const updatedMetadata = {
        orderBuilder: {
          capDetails: currentQuoteData?.capDetails,
          customization: currentQuoteData?.customization,
          delivery: currentQuoteData?.delivery,
          pricing: currentQuoteData?.pricing,
          orderBuilderStatus: orderBuilderStatus,
          quoteVersions: orderBuilderStatus?.costBreakdown?.versions || [],
          lastUpdated: new Date().toISOString()
        },
        userProfile: {
          name: userProfile?.name || authUser?.name,
          email: userProfile?.email || authUser?.email,
          company: userProfile?.company,
          phone: userProfile?.phone,
          address: userProfile?.address
        },
        session: {
          sessionId: sessionId,
          uploadedFiles: uploadedFiles.length > 0 ? uploadedFiles : undefined,
          isGuest: !authUser
        }
      };

      const response = await fetch(`/api/conversations/${conversationId}`, {
        method: 'PATCH',
        headers: authHeaders,
        body: JSON.stringify({ 
          conversationId: conversationId,
          metadata: updatedMetadata,
          lastActivity: new Date().toISOString()
        })
      });

      if (response.ok) {
        console.log('‚úÖ Conversation metadata updated successfully');
      } else {
        console.error('Failed to update conversation metadata:', await response.text());
      }
    } catch (error) {
      console.error('Error updating conversation metadata:', error);
    }
  };

  // Filter conversations based on search query
  const filteredConversations = conversations.filter(conv => 
    conv.title?.toLowerCase().includes(searchQuery.toLowerCase()) ||
    conv.preview?.content.toLowerCase().includes(searchQuery.toLowerCase())
  );

  // Format timestamp for conversation list
  const formatConversationTime = (timestamp: string) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);
    
    if (diffMins < 1) return 'Just now';
    if (diffMins < 60) return `${diffMins}m ago`;
    if (diffHours < 24) return `${diffHours}h ago`;
    if (diffDays < 7) return `${diffDays}d ago`;
    
    return date.toLocaleDateString();
  };

  // Guest Contact Form Component
  const GuestContactForm = () => {
    const [formData, setFormData] = useState<GuestContactInfo>({
      name: '',
      email: '',
      phone: '',
      address: '',
      company: ''
    });
    const [errors, setErrors] = useState<Partial<GuestContactInfo>>({});
    const [isSubmitting, setIsSubmitting] = useState(false);

    const validateForm = () => {
      const newErrors: Partial<GuestContactInfo> = {};
      
      if (!formData.name.trim()) {
        newErrors.name = 'Name is required';
      } else if (formData.name.trim().length < 2) {
        newErrors.name = 'Name must be at least 2 characters';
      }
      
      if (!formData.email.trim()) {
        newErrors.email = 'Email is required';
      } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
        newErrors.email = 'Please enter a valid email address';
      }
      
      // Optional phone validation - allow numbers starting with 0
      if (formData.phone.trim() && !/^[\+]?[0-9][\d]{0,15}$/.test(formData.phone.replace(/[\s\-\(\)]/g, ''))) {
        newErrors.phone = 'Please enter a valid phone number';
      }
      
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = async (e: React.FormEvent) => {
      e.preventDefault();
      
      if (!validateForm()) {
        return;
      }
      
      setIsSubmitting(true);
      
      try {
        // Set the guest contact info and create a user profile from it
        setGuestContactInfo(formData);
        setUserProfile({
          name: formData.name,
          email: formData.email,
          phone: formData.phone || undefined,
          address: formData.address || undefined,
          company: formData.company || undefined
        });
        
        // Hide the form
        setShowGuestContactForm(false);
        
        // If there was a pending quote message, send it now
        if (pendingQuoteMessage) {
          setInputMessage(pendingQuoteMessage);
          setPendingQuoteMessage(null);
          // The message will be sent when the form is submitted by the user
        }
        
      } catch (error) {
        console.error('Error saving guest contact info:', error);
      } finally {
        setIsSubmitting(false);
      }
    };

    return (
      <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-3 sm:p-4">
        <div className="bg-stone-900/95 backdrop-blur-xl border border-white/10 rounded-2xl p-4 sm:p-6 w-full max-w-sm sm:max-w-md mx-auto">
          <div className="text-center mb-6">
            <h3 className="text-xl font-semibold text-white mb-2">Contact Information Required</h3>
            <p className="text-stone-300 text-sm">
              To create your custom cap quote, please provide your contact information:
            </p>
          </div>
          
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-white mb-1">
                Name <span className="text-red-400">*</span>
              </label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                className={`w-full px-3 py-2 bg-white/5 border ${errors.name ? 'border-red-400' : 'border-white/10'} rounded-lg text-white placeholder-stone-400 focus:outline-none focus:ring-2 focus:ring-lime-400/50`}
                placeholder="Your full name"
              />
              {errors.name && <p className="text-red-400 text-xs mt-1">{errors.name}</p>}
            </div>
            
            <div>
              <label className="block text-sm font-medium text-white mb-1">
                Email <span className="text-red-400">*</span>
              </label>
              <input
                type="email"
                value={formData.email}
                onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}
                className={`w-full px-3 py-2 bg-white/5 border ${errors.email ? 'border-red-400' : 'border-white/10'} rounded-lg text-white placeholder-stone-400 focus:outline-none focus:ring-2 focus:ring-lime-400/50`}
                placeholder="your@email.com"
              />
              {errors.email && <p className="text-red-400 text-xs mt-1">{errors.email}</p>}
            </div>
            
            <div>
              <label className="block text-sm font-medium text-white mb-1">Phone (Optional)</label>
              <input
                type="tel"
                value={formData.phone}
                onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}
                className={`w-full px-3 py-2 bg-white/5 border ${errors.phone ? 'border-red-400' : 'border-white/10'} rounded-lg text-white placeholder-stone-400 focus:outline-none focus:ring-2 focus:ring-lime-400/50`}
                placeholder="(555) 123-4567"
              />
              {errors.phone && <p className="text-red-400 text-xs mt-1">{errors.phone}</p>}
            </div>
            
            <div>
              <label className="block text-sm font-medium text-white mb-1">Address (Optional)</label>
              <input
                type="text"
                value={formData.address}
                onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}
                className="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white placeholder-stone-400 focus:outline-none focus:ring-2 focus:ring-lime-400/50"
                placeholder="123 Main St, City, State 12345"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-white mb-1">Company (Optional)</label>
              <input
                type="text"
                value={formData.company}
                onChange={(e) => setFormData(prev => ({ ...prev, company: e.target.value }))}
                className="w-full px-3 py-2 bg-white/5 border border-white/10 rounded-lg text-white placeholder-stone-400 focus:outline-none focus:ring-2 focus:ring-lime-400/50"
                placeholder="Your company name"
              />
            </div>
            
            <div className="flex gap-3 pt-4">
              <button
                type="button"
                onClick={() => {
                  setShowGuestContactForm(false);
                  setPendingQuoteMessage(null);
                }}
                className="flex-1 px-4 py-2 text-stone-300 hover:text-white transition-colors"
              >
                Cancel
              </button>
              <button
                type="submit"
                disabled={isSubmitting}
                className="flex-1 bg-gradient-to-r from-lime-400 to-lime-500 text-black font-medium py-2 px-4 rounded-lg hover:from-lime-500 hover:to-lime-600 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isSubmitting ? 'Saving...' : 'Continue'}
              </button>
            </div>
          </form>
        </div>
      </div>
    );
  };

  const formatUserProfile = () => {
    
    // Try to get name from multiple sources
    let displayName = 'Guest User';
    let displayEmail = 'guest@example.com';
    
    if (authUser) {
      displayEmail = authUser.email || 'no-email@example.com';
      displayName = userProfile?.name || 
                   authUser.name ||
                   authUser.email?.split('@')[0] || 
                   'Authenticated User';
    }
    
    if (userProfile) {
      displayName = userProfile.name || displayName;
      displayEmail = userProfile.email || displayEmail;
    }
    
    // Use guest contact info if available and no auth user
    if (!authUser && guestContactInfo) {
      displayName = guestContactInfo.name;
      displayEmail = guestContactInfo.email;
    }
    
    return (
      <div className="flex items-start gap-4">
        <img 
          src={authUser?.avatarUrl || "https://images.unsplash.com/photo-1544005313-94ddf0286df2?q=80&w=256&auto=format&fit=crop"} 
          alt="Profile avatar" 
          className="h-12 w-12 rounded-xl border border-stone-600 object-cover"
        />
        <div className="flex-1">
          <div className="flex items-center justify-between">
            <h3 className="text-base font-medium tracking-tight text-white">
              {displayName}
            </h3>
            <span className={`px-2.5 py-1 rounded-full text-[10px] border ${
              authUser 
                ? 'border-green-400/30 bg-green-400/10 text-green-300' 
                : 'border-yellow-400/30 bg-yellow-400/10 text-yellow-300'
            }`}>
              {authUser ? (userProfile ? 'Authenticated' : 'Auth Only') : 'Guest'}
            </span>
          </div>
          <div className="mt-2 space-y-1.5">
            <p className="text-sm text-white/70">{displayEmail}</p>
            {(userProfile?.phone || guestContactInfo?.phone) && 
              <p className="text-sm text-stone-300">{userProfile?.phone || guestContactInfo?.phone}</p>}
            {(userProfile?.address || guestContactInfo?.address) && (
              <p className="text-xs text-white/50">
                {userProfile?.address ? 
                  (typeof userProfile.address === 'string' ? userProfile.address : 
                   `${userProfile.address.street || ''} ${userProfile.address.city || ''} ${userProfile.address.state || ''}`) :
                  guestContactInfo?.address}
              </p>
            )}
            {guestContactInfo?.company && 
              <p className="text-xs text-lime-300/70">Company: {guestContactInfo.company}</p>}
            {!authUser && !guestContactInfo && (
              <p className="text-xs text-white/50">Sign in for personalized support</p>
            )}
          </div>
        </div>
      </div>
    );
  };

  // Helper function to format system messages with colored text
  const formatSystemMessage = (content: string) => {
    // Split the message and add colors for specific model names
    const parts = content.split(/(SupportSage|CapCraft AI)/g);
    
    return parts.map((part, index) => {
      if (part === 'SupportSage') {
        return (
          <span key={index} className="text-green-400 font-medium">
            {part}
          </span>
        );
      } else if (part === 'CapCraft AI') {
        return (
          <span key={index} className="text-red-400 font-medium">
            {part}
          </span>
        );
      } else {
        return <span key={index}>{part}</span>;
      }
    });
  };

  if (authLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center text-white">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-teal-400 mx-auto mb-4"></div>
          <p className="text-stone-300">Loading AI Support...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen text-stone-200 antialiased font-inter">
      {/* Guest Contact Form Modal */}
      {showGuestContactForm && <GuestContactForm />}
      
      {/* Page Wrapper */}
      <div className={`w-full transition-all duration-300 ${showConversationHistory ? 'lg:pl-96' : ''}`}>
        {/* Customer Guidelines Header */}
        <header className="border-b border-stone-600">
          <div className="max-w-7xl mx-auto px-3 sm:px-6 py-3 sm:py-6">
            <div className="rounded-2xl border border-stone-600 bg-black/40 backdrop-blur-xl p-4 sm:p-6">
              <div className="flex items-center gap-3 mb-4">
                <div className="h-10 w-10 rounded-xl bg-gradient-to-br from-lime-400/20 to-lime-600/10 border border-lime-400/30 grid place-items-center">
                  <SparklesIcon className="h-5 w-5 text-lime-400" />
                </div>
                <div>
                  <h1 className="text-lg sm:text-xl font-semibold text-white tracking-tight">AI Support Center</h1>
                  <p className="text-sm sm:text-sm text-white/60">Get instant help with orders, quotes, and customization</p>
                </div>
              </div>
              
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4">
                <div className="flex items-start gap-3 p-3 sm:p-4 rounded-xl bg-white/5 backdrop-blur-sm border border-white/10">
                  <div className="h-8 w-8 rounded-lg bg-blue-400/20 border border-blue-400/30 grid place-items-center flex-shrink-0">
                    <svg className="h-4 w-4 text-blue-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-base sm:text-sm font-medium text-white mb-1">Quick Questions</h3>
                    <p className="text-sm sm:text-xs text-white/60">"What's my order status?" or "How much for 50 caps?"</p>
                  </div>
                </div>
                
                <div className="flex items-start gap-3 p-3 sm:p-4 rounded-xl bg-white/5 backdrop-blur-sm border border-white/10">
                  <div className="h-8 w-8 rounded-lg bg-purple-400/20 border border-purple-400/30 grid place-items-center flex-shrink-0">
                    <svg className="h-4 w-4 text-purple-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2m-9 3v12a2 2 0 002 2h6a2 2 0 002-2V7M7 7h10M10 11v6M14 11v6" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-base sm:text-sm font-medium text-white mb-1">Upload Files</h3>
                    <p className="text-sm sm:text-xs text-white/60">Share artwork, logos, or reference images for quotes</p>
                  </div>
                </div>
                
                <div className="flex items-start gap-3 p-3 sm:p-4 rounded-xl bg-white/5 backdrop-blur-sm border border-white/10">
                  <div className="h-8 w-8 rounded-lg bg-green-400/20 border border-green-400/30 grid place-items-center flex-shrink-0">
                    <svg className="h-4 w-4 text-green-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                  </div>
                  <div>
                    <h3 className="text-base sm:text-sm font-medium text-white mb-1">Instant Quotes</h3>
                    <p className="text-sm sm:text-xs text-white/60">Get pricing for custom caps with quantities and options</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </header>

        {/* Main Grid */}
        <main className="max-w-7xl mx-auto px-3 sm:px-6 py-3 sm:py-6 grid grid-cols-1 lg:grid-cols-12 gap-3 sm:gap-6">
          {/* Chat Panel */}
          <section className="lg:col-span-8 rounded-2xl border border-stone-600 bg-black/40 backdrop-blur-xl flex flex-col overflow-hidden order-1">
            {/* Chat Header */}
            <div className="px-3 sm:px-5 py-3 sm:py-4 border-b border-stone-600 flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="h-9 w-9 rounded-xl bg-black/30 backdrop-blur-sm border border-stone-600 grid place-items-center text-stone-200">
                  <CpuChipIcon className="h-5 w-5" />
                </div>
                <div>
                  <div className="flex items-center gap-2">
                    <h2 className="text-lg sm:text-base md:text-lg tracking-tight font-semibold text-white">
                      {currentAssistant?.displayName || 'AI Support'} {currentAssistant?.icon || ''}
                    </h2>
                    <span className={`px-2 py-0.5 rounded-full text-[10px] ${getModelBadgeColor(currentModel)}`}>
                      {currentAssistant?.specialty || 'Powered by OpenAI'}
                    </span>
                  </div>
                  <p className="text-xs text-white/50">Ask about orders, shipments, and quotes</p>
                </div>
              </div>
              <div className="flex items-center gap-2">
                {!showConversationHistory && (
                  <button
                    onClick={() => setShowConversationHistory(true)}
                    className="lg:hidden h-9 w-9 rounded-xl bg-black/30 backdrop-blur-sm border border-stone-600 grid place-items-center text-stone-300 hover:text-white hover:bg-black/40 transition-all duration-200"
                    title="Show conversation history"
                  >
                    <ChatBubbleLeftRightIcon className="h-4 w-4" />
                  </button>
                )}
                <div className="hidden md:flex items-center gap-2">
                <button 
                  onClick={() => setShowConversationHistory(!showConversationHistory)}
                  className={`px-3 py-1.5 rounded-full text-xs border transition-colors flex items-center gap-1.5 ${
                    showConversationHistory 
                      ? 'border-blue-400/30 bg-blue-400/10 text-blue-300'
                      : 'border-stone-600 text-stone-300 hover:border-stone-500 hover:text-stone-200'
                  }`}
                >
                  <ChatBubbleLeftRightIcon className="h-3 w-3" />
                  History
                </button>
                <div className="px-2.5 py-1 rounded-full text-xs border border-stone-600 text-stone-300">Secure</div>
                <div className="px-2.5 py-1 rounded-full text-xs border border-stone-600 text-stone-300">24/7</div>
              </div>
            </div>

            {/* Chat Scroll Area */}
            <div ref={chatContainerRef} className="flex-1 overflow-y-auto p-3 sm:p-4 md:p-6 space-y-3 sm:space-y-4">
              {/* Welcome message */}
              {messages.length === 0 && (
                <div className="flex items-center gap-3 text-sm italic text-stone-300">
                  <div className="flex-1 h-px bg-stone-600"></div>
                  <span>Session started ‚Äî Intent detection active</span>
                  <div className="flex-1 h-px bg-stone-600"></div>
                </div>
              )}

              {/* Messages */}
              {messages.map((message) => (
                <div key={message.id}>
                  {message.role === 'system' ? (
                    <div className="flex items-center gap-3 text-sm italic text-stone-300">
                      <div className="flex-1 h-px bg-stone-600"></div>
                      <span>{formatSystemMessage(message.content)}</span>
                      <div className="flex-1 h-px bg-stone-600"></div>
                    </div>
                  ) : message.role === 'user' ? (
                    <div className="flex justify-end">
                      <div className="max-w-[78%]">
                        <div className="flex items-center justify-end gap-2 mb-1">
                          <span className="text-xs text-white/50">
                            {message.timestamp ? new Date(message.timestamp).toLocaleTimeString([], { 
                              hour: '2-digit', 
                              minute: '2-digit' 
                            }) : ''}
                          </span>
                        </div>
                        <div className="rounded-[20px] border border-orange-400/30 bg-gradient-to-br from-orange-600/20 via-orange-500/15 to-orange-400/10 backdrop-blur-xl p-3 sm:p-4 text-base sm:text-sm md:text-base text-white shadow-[0_8px_30px_rgba(218,141,38,0.25)] ring-1 ring-orange-400/20 max-w-[85%] sm:max-w-none">
                          {message.content}
                        </div>
                      </div>
                    </div>
                  ) : (
                    <div className="flex items-start gap-3">
                      <div className="h-9 w-9 rounded-xl bg-black/30 backdrop-blur-sm border border-stone-600 grid place-items-center text-stone-200 mt-0.5">
                        <CpuChipIcon className="h-5 w-5 text-teal-300" />
                      </div>
                      <div className="max-w-[82%]">
                        <div className="mb-1 flex items-center gap-2">
                          <span className="text-sm font-medium tracking-tight text-white">
                            {currentAssistant?.displayName || 'AI Support'} {currentAssistant?.icon || ''}
                          </span>
                          <span className={`px-2 py-0.5 rounded-full text-[10px] ${getModelBadgeColor(message.model)}`}>
                            {currentAssistant?.specialty || 'Powered by OpenAI'}
                          </span>
                          <span className="text-xs text-white/50">
                            {message.timestamp ? new Date(message.timestamp).toLocaleTimeString([], { 
                              hour: '2-digit', 
                              minute: '2-digit' 
                            }) : ''}
                          </span>
                        </div>
                        <div className="rounded-[20px] border border-purple-400/30 bg-gradient-to-br from-purple-600/20 via-purple-500/15 to-purple-400/10 backdrop-blur-xl p-3 sm:p-4 text-base sm:text-sm md:text-base text-white shadow-[0_8px_30px_rgba(147,51,234,0.25)] ring-1 ring-purple-400/20 max-w-[90%] sm:max-w-none">
                          <div 
                            className="whitespace-pre-wrap"
                            dangerouslySetInnerHTML={{
                              __html: message.content
                                .replace(/\*\*(.*?)\*\*/g, '<strong class="text-white/95 font-semibold">$1</strong>')
                                .replace(/^‚Ä¢ (.*?)$/gm, '<div class="flex items-start gap-2 my-1"><span class="text-lime-300 mt-0.5">‚Ä¢</span><span>$1</span></div>')
                                .replace(/\n/g, '<br/>')
                            }}
                          />
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              ))}

              {/* Loading indicator */}
              {isLoading && (
                <div className="flex items-center gap-2 text-xs text-orange-400">
                  <div className="h-1.5 w-1.5 rounded-full bg-orange-400 animate-pulse"></div>
                  <div className="h-1.5 w-1.5 rounded-full bg-orange-400 animate-pulse" style={{animationDelay: '150ms'}}></div>
                  <div className="h-1.5 w-1.5 rounded-full bg-orange-400 animate-pulse" style={{animationDelay: '300ms'}}></div>
                  <span>AI is thinking...</span>
                </div>
              )}

            </div>

            {/* Uploaded Files Preview */}
            {uploadedFiles.length > 0 && (
              <div className="px-3 sm:px-4 md:px-5 py-2 border-t border-stone-600 bg-black/20">
                <div className="flex flex-wrap gap-2 sm:gap-3">
                  {uploadedFiles.map((fileUrl, index) => (
                    <div key={index} className="relative group">
                      <img 
                        src={fileUrl} 
                        alt={`Uploaded ${index + 1}`}
                        className="w-14 h-14 sm:w-12 sm:h-12 object-cover rounded-lg border border-stone-500 touch-manipulation"
                      />
                      <button
                        type="button"
                        onClick={() => setUploadedFiles(prev => prev.filter((_, i) => i !== index))}
                        className="absolute -top-2 -right-2 w-6 h-6 sm:w-5 sm:h-5 bg-red-500 text-white rounded-full text-xs hover:bg-red-600 transition-colors opacity-70 sm:opacity-0 sm:group-hover:opacity-100 touch-manipulation"
                      >
                        √ó
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Input Bar */}
            <form onSubmit={sendMessage} className="px-3 sm:px-4 md:px-5 py-3 sm:py-4 border-t border-stone-600 bg-black/20">
              <div className="flex items-end gap-2 sm:gap-3">
                <button 
                  type="button"
                  onClick={triggerFileUpload}
                  disabled={isUploading}
                  className="h-11 w-11 sm:h-10 sm:w-10 shrink-0 rounded-full border border-stone-600 bg-black/30 backdrop-blur-sm grid place-items-center text-white/70 hover:text-white hover:bg-black/40 transition-all duration-200 disabled:opacity-50 touch-manipulation" 
                  title="Attach files"
                >
                  <PaperClipIcon className={`h-5 w-5 ${isUploading ? 'animate-spin' : ''}`} />
                </button>
                <input 
                  ref={fileInputRef}
                  type="file"
                  multiple
                  accept="image/*,application/pdf,application/illustrator,application/postscript,.eps,.ai,.txt"
                  onChange={(e) => e.target.files && handleFileUpload(e.target.files)}
                  className="hidden"
                />
                <div className="flex-1 relative">
                  <input 
                    type="text" 
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    placeholder="Describe your request or ask about orders, shipments, quotes‚Ä¶" 
                    className="w-full h-12 sm:h-11 md:h-12 rounded-full bg-black/30 backdrop-blur-sm border border-stone-600 focus:border-stone-400 focus:bg-black/40 outline-none px-4 sm:px-4 md:px-5 text-base sm:text-sm md:text-base placeholder:text-white/40 text-white transition-all duration-200 touch-manipulation"
                    disabled={isLoading}
                  />
                  <div className="pointer-events-none absolute inset-y-0 right-3 flex items-center">
                  </div>
                </div>
                <button 
                  type="submit"
                  disabled={isLoading || isUploading || (!inputMessage.trim() && uploadedFiles.length === 0)}
                  className="h-12 sm:h-10 md:h-12 px-4 sm:px-4 md:px-5 rounded-full bg-lime-400 text-black hover:bg-lime-500 transition-colors flex items-center gap-2 font-medium tracking-tight disabled:opacity-50 disabled:cursor-not-allowed shadow-[0_10px_40px_-10px_rgba(132,204,22,0.6)] hover:-translate-y-0.5 touch-manipulation"
                >
                  <span className="hidden sm:inline">Send</span>
                  <ArrowUpRightIcon className="h-5 w-5 -mr-0.5" />
                </button>
              </div>
            </form>
          </section>

          {/* Right Column */}
          <aside className="lg:col-span-4 flex flex-col space-y-3 sm:space-y-6 order-2 lg:order-2">
            {/* Profile Card */}
            <section className={`rounded-2xl border p-3 sm:p-4 md:p-5 backdrop-blur-xl transition-all duration-300 ${
              authUser 
                ? 'border-green-400/30 bg-black/40 bg-gradient-to-br from-green-400/10 to-transparent' 
                : 'border-yellow-400/30 bg-black/40 bg-gradient-to-br from-yellow-400/10 to-transparent'
            }`}>
              {formatUserProfile()}
              <div className="mt-4 pt-4 border-t border-stone-600">
                <div className="flex items-center gap-2 text-xs text-stone-300">
                  <CpuChipIcon className="h-3.5 w-3.5 text-white/50" />
                  {authUser && userProfile 
                    ? 'Full Profile Loaded' 
                    : authUser 
                    ? 'Auth Only (No DB Profile)' 
                    : 'Guest Profile'}
                </div>
                {authUser && !userProfile && (
                  <div className="mt-1 text-xs text-yellow-400/80">
                    Using auth data fallback
                  </div>
                )}
              </div>
            </section>

            {/* Upload Artwork Component */}
            <UploadArtworkComponent 
              onAnalysisComplete={(analysis) => {
                console.log('üé® Artwork analysis completed:', analysis);
                // Optionally show analysis results or auto-trigger order builder visibility
              }}
              onGenerateQuote={async (analysis) => {
                console.log('üìã Generating quote from artwork analysis:', analysis);
                
                // Convert artwork analysis to CapCraft format and trigger order creation
                const capCraftData = analysis.capCraftFormat || {};
                
                // Create an order creation message with the analysis data
                const orderMessage = `Generate a complete quote for this SINGLE cap style based on artwork analysis:
                
Cap Specifications:
- Style: ${analysis.capSpec.shape}
- Bill Shape: ${analysis.capSpec.billShape}
- Fabric: ${analysis.capSpec.fabric} 
- Closure: ${analysis.capSpec.closure}
- Colors: ${formatCapColors(analysis.capSpec.frontCrown, analysis.capSpec.backCrown, analysis.capSpec.bill)}

Assets/Logos (${analysis.assets.length}):
${analysis.assets.map(asset => `- ${asset.position}: ${asset.application}, Size: ${asset.size.height} x ${asset.size.width}, Style: ${asset.style}`).join('\n')}

${analysis.accessories.length > 0 ? `Accessories:
${analysis.accessories.map(acc => `- ${acc.type}: ${acc.details}`).join('\n')}` : ''}

Please provide a detailed quote with cost breakdown.`;

                // Add the message to conversation and trigger CapCraft AI using the normal flow
                setInputMessage(orderMessage);
                
                // Use the normal sendMessage flow but with a timeout to prevent hanging
                setTimeout(() => {
                  const fakeEvent = { preventDefault: () => {} } as React.FormEvent;
                  sendMessage(fakeEvent);
                }, 100); // Small delay to ensure state is set
              }}
              userId={authUser?.id}
              sessionId={`artwork-${Date.now()}`}
            />

            {/* Order Builder Status Card - Sticky - Conditional Visibility */}
            {isOrderBuilderVisible && (
              <section className="sticky top-6 z-10 rounded-2xl border border-stone-600 bg-black/40 backdrop-blur-xl p-4">
              <div className="flex items-center justify-between">
                <h3 className="text-sm font-medium tracking-tight text-white">Order Builder</h3>
                <span className="px-2 py-0.5 rounded-full text-[10px] border border-stone-600 text-stone-300">
                  {orderBuilderStatus.costBreakdown.available ? '4 steps' : '3 steps'}
                  {orderBuilderStatus.costBreakdown.versions.length > 1 && (
                    <span className="ml-1 text-blue-300">‚Ä¢ {orderBuilderStatus.costBreakdown.versions.length} quotes</span>
                  )}
                </span>
              </div>

              <div className="mt-4 space-y-3">
                {/* Step 1: Cap Style Setup */}
                <div className={`p-3 rounded-xl border transition-all duration-300 ${
                  orderBuilderStatus.capStyle.status === 'green' 
                    ? 'border-green-400/30 bg-green-400/10'
                    : orderBuilderStatus.capStyle.status === 'yellow'
                    ? 'border-yellow-400/30 bg-yellow-400/10'
                    : 'border-red-400/30 bg-red-400/10'
                }`}>
                  <div className="flex items-start gap-3">
                    <div className={`h-7 w-7 rounded-full border grid place-items-center text-[11px] font-medium transition-colors ${
                      orderBuilderStatus.capStyle.status === 'green'
                        ? 'border-green-400/30 bg-green-400/10 text-green-300'
                        : orderBuilderStatus.capStyle.status === 'yellow'
                        ? 'border-yellow-400/30 bg-yellow-400/10 text-yellow-300'
                        : 'border-red-400/30 bg-red-400/10 text-red-300'
                    }`}>
                      {orderBuilderStatus.capStyle.status === 'green' ? (
                        <CheckIcon className="h-4 w-4" />
                      ) : (
                        <ClipboardDocumentListIcon className="h-4 w-4" />
                      )}
                    </div>
                    <div className="flex-1">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <h4 className="text-sm font-medium tracking-tight text-white">Cap Style Setup</h4>
                          <span className={`text-[10px] px-2 py-0.5 rounded-full border ${
                            orderBuilderStatus.capStyle.status === 'green'
                              ? 'border-green-400/30 bg-green-400/10 text-green-300'
                              : orderBuilderStatus.capStyle.status === 'yellow'
                              ? 'border-yellow-400/30 bg-yellow-400/10 text-yellow-300'
                              : 'border-red-400/30 bg-red-400/10 text-red-300'
                          }`}>
                            {orderBuilderStatus.capStyle.status === 'green' ? 'Complete' : 
                             orderBuilderStatus.capStyle.status === 'yellow' ? 'Partial' : 'Required'}
                          </span>
                        </div>
                        <button
                          onClick={() => toggleBlockCollapse('capStyle')}
                          className="p-1 rounded-lg border border-stone-600 bg-black/30 backdrop-blur-sm hover:bg-black/40 transition-all duration-200"
                        >
                          <ChevronDownIcon 
                            className={`h-4 w-4 text-stone-300 transition-transform duration-200 ${
                              collapsedBlocks.capStyle ? 'rotate-180' : ''
                            }`} 
                          />
                        </button>
                      </div>
                      {!collapsedBlocks.capStyle && (
                        <>
                          {/* AI Values Section */}
                          {currentQuoteData?.capDetails && (
                            <div className="mt-2 p-2 rounded-lg border border-lime-400/20 bg-lime-400/5">
                              <h5 className="text-xs font-medium text-lime-300 mb-1">Current AI Values</h5>
                              <div className="grid grid-cols-2 gap-1 text-[10px]">
                                {currentQuoteData.capDetails.size && (
                                  <div className="text-white/70">Size: <span className="text-white">{currentQuoteData.capDetails.size}</span></div>
                                )}
                                {currentQuoteData.capDetails.color && (
                                  <div className="text-white/70">Color: <span className="text-white">{currentQuoteData.capDetails.color}</span></div>
                                )}
                                {currentQuoteData.capDetails.profile && (
                                  <div className="text-white/70">Profile: <span className="text-white">{currentQuoteData.capDetails.profile}</span></div>
                                )}
                                {currentQuoteData.capDetails.billShape && (
                                  <div className="text-white/70">Shape: <span className="text-white">{currentQuoteData.capDetails.billShape}</span></div>
                                )}
                                {currentQuoteData.capDetails.structure && (
                                  <div className="text-white/70">Structure: <span className="text-white">{currentQuoteData.capDetails.structure}</span></div>
                                )}
                                {currentQuoteData.capDetails.fabric && (
                                  <div className="text-white/70">Fabric: <span className="text-white">{currentQuoteData.capDetails.fabric}</span></div>
                                )}
                                {currentQuoteData.capDetails.closure && (
                                  <div className="text-white/70">Closure: <span className="text-white">{currentQuoteData.capDetails.closure}</span></div>
                                )}
                              </div>
                            </div>
                          )}
                          
                          {/* Status Grid */}
                          <div className="mt-2 grid grid-cols-2 gap-1 text-[10px]">
                            {[
                              { key: 'size', label: 'Size' },
                              { key: 'color', label: 'Color' },
                              { key: 'profile', label: 'Profile' },
                              { key: 'shape', label: 'Shape' },
                              { key: 'structure', label: 'Structure' },
                              { key: 'fabric', label: 'Fabric' },
                              { key: 'stitch', label: 'Stitch' }
                            ].map((item) => (
                              <div key={item.key} className="flex items-center gap-1">
                                {orderBuilderStatus.capStyle.items[item.key as keyof typeof orderBuilderStatus.capStyle.items] ? (
                                  <CheckIcon className="h-3 w-3 text-green-400" />
                                ) : (
                                  <div className="h-3 w-3 rounded-full border border-stone-500" />
                                )}
                                <span className="text-stone-300">{item.label}</span>
                              </div>
                            ))}
                          </div>
                        </>
                      )}
                    </div>
                  </div>
                </div>

                {/* Step 2: Customization */}
                <div className={`p-3 rounded-xl border transition-all duration-300 ${
                  orderBuilderStatus.customization.status === 'yellow'
                    ? 'border-yellow-400/30 bg-yellow-400/10'
                    : 'border-stone-600 bg-white/[0.04]'
                }`}>
                  <div className="flex items-start gap-3">
                    <div className={`h-7 w-7 rounded-full border grid place-items-center text-[11px] font-medium transition-colors ${
                      orderBuilderStatus.customization.status === 'yellow'
                        ? 'border-yellow-400/30 bg-yellow-400/10 text-yellow-300'
                        : 'border-white/15 bg-black/30 backdrop-blur-sm text-white'
                    }`}>
                      {orderBuilderStatus.customization.completed ? (
                        <CheckIcon className="h-4 w-4" />
                      ) : (
                        <CogIcon className="h-4 w-4" />
                      )}
                    </div>
                    <div className="flex-1">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <h4 className="text-sm font-medium tracking-tight text-white">Customization</h4>
                          <span className={`text-[10px] px-2 py-0.5 rounded-full border ${
                            orderBuilderStatus.customization.status === 'yellow'
                              ? 'border-yellow-400/30 bg-yellow-400/10 text-yellow-300'
                              : 'border-stone-600 text-stone-300'
                          }`}>
                            {orderBuilderStatus.customization.completed ? 'Optional' : 'Empty'}
                          </span>
                        </div>
                        <button
                          onClick={() => toggleBlockCollapse('customization')}
                          className="p-1 rounded-lg border border-stone-600 bg-black/30 backdrop-blur-sm hover:bg-black/40 transition-all duration-200"
                        >
                          <ChevronDownIcon 
                            className={`h-4 w-4 text-stone-300 transition-transform duration-200 ${
                              collapsedBlocks.customization ? 'rotate-180' : ''
                            }`} 
                          />
                        </button>
                      </div>
                      {!collapsedBlocks.customization && (
                        <>
                          {/* AI Values Section */}
                          {currentQuoteData?.customization && (
                            <div className="mt-2 p-2 rounded-lg border border-amber-400/20 bg-amber-400/5">
                              <h5 className="text-xs font-medium text-amber-300 mb-1">Current AI Values</h5>
                              <div className="space-y-1 text-[10px]">
                                {currentQuoteData.customization.logoSetup && (
                                  <div className="text-white/70">Logo Setup: <span className="text-white">{currentQuoteData.customization.logoSetup}</span></div>
                                )}
                                {currentQuoteData.customization.accessories && currentQuoteData.customization.accessories.length > 0 && (
                                  <div className="text-white/70">Accessories: <span className="text-white">{currentQuoteData.customization.accessories.join(', ')}</span></div>
                                )}
                                {currentQuoteData.customization.moldCharges && (
                                  <div className="text-white/70">Mold Charges: <span className="text-white">${currentQuoteData.customization.moldCharges}</span></div>
                                )}
                                {currentQuoteData.customization.logoDetails && currentQuoteData.customization.logoDetails.length > 0 && (
                                  <div className="text-white/70">
                                    Logos: 
                                    {currentQuoteData.customization.logoDetails.map((logo: any, idx: number) => (
                                      <div key={idx} className="ml-2 text-white">
                                        ‚Ä¢ {logo.location}: {logo.type} ({logo.size})
                                      </div>
                                    ))}
                                  </div>
                                )}
                              </div>
                            </div>
                          )}
                          
                          {/* Status Grid */}
                          <div className="mt-2 space-y-1 text-[10px]">
                            {[
                              { key: 'logoSetup', label: 'Logo Setup' },
                              { key: 'accessories', label: 'Accessories' },
                              { key: 'moldCharges', label: 'Mold Charges' }
                            ].map((item) => (
                              <div key={item.key} className="flex items-center gap-1">
                                {orderBuilderStatus.customization.items[item.key as keyof typeof orderBuilderStatus.customization.items] ? (
                                  <CheckIcon className="h-3 w-3 text-green-400" />
                                ) : (
                                  <div className="h-3 w-3 rounded-full border border-stone-500" />
                                )}
                                <span className="text-stone-300">{item.label}</span>
                              </div>
                            ))}
                            {orderBuilderStatus.customization.logoPositions.length > 0 && (
                              <div className="mt-1 text-[9px] text-white/50">
                                Logo positions: {orderBuilderStatus.customization.logoPositions.join(', ')}
                              </div>
                            )}
                          </div>
                        </>
                      )}
                    </div>
                  </div>
                </div>

                {/* Step 3: Delivery */}
                <div className={`p-3 rounded-xl border transition-all duration-300 ${
                  orderBuilderStatus.delivery.status === 'green'
                    ? 'border-green-400/30 bg-green-400/10'
                    : 'border-red-400/30 bg-red-400/10'
                }`}>
                  <div className="flex items-start gap-3">
                    <div className={`h-7 w-7 rounded-full border grid place-items-center text-[11px] font-medium transition-colors ${
                      orderBuilderStatus.delivery.status === 'green'
                        ? 'border-green-400/30 bg-green-400/10 text-green-300'
                        : 'border-red-400/30 bg-red-400/10 text-red-300'
                    }`}>
                      {orderBuilderStatus.delivery.completed ? (
                        <CheckIcon className="h-4 w-4" />
                      ) : (
                        <TruckIcon className="h-4 w-4" />
                      )}
                    </div>
                    <div className="flex-1">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <h4 className="text-sm font-medium tracking-tight text-white">Delivery</h4>
                          <span className={`text-[10px] px-2 py-0.5 rounded-full border ${
                            orderBuilderStatus.delivery.status === 'green'
                              ? 'border-green-400/30 bg-green-400/10 text-green-300'
                              : 'border-red-400/30 bg-red-400/10 text-red-300'
                          }`}>
                            {orderBuilderStatus.delivery.completed ? 'Ready' : 'Required'}
                          </span>
                        </div>
                        <button
                          onClick={() => toggleBlockCollapse('delivery')}
                          className="p-1 rounded-lg border border-stone-600 bg-black/30 backdrop-blur-sm hover:bg-black/40 transition-all duration-200"
                        >
                          <ChevronDownIcon 
                            className={`h-4 w-4 text-stone-300 transition-transform duration-200 ${
                              collapsedBlocks.delivery ? 'rotate-180' : ''
                            }`} 
                          />
                        </button>
                      </div>
                      {!collapsedBlocks.delivery && (
                        <>
                          {/* AI Values Section */}
                          {currentQuoteData?.delivery && (
                            <div className="mt-2 p-2 rounded-lg border border-cyan-400/20 bg-cyan-400/5">
                              <h5 className="text-xs font-medium text-cyan-300 mb-1">Current AI Values</h5>
                              <div className="space-y-1 text-[10px]">
                                {currentQuoteData.delivery.method && (
                                  <div className="text-white/70">Method: <span className="text-white">{currentQuoteData.delivery.method}</span></div>
                                )}
                                {currentQuoteData.delivery.leadTime && (
                                  <div className="text-white/70">Lead Time: <span className="text-white">{currentQuoteData.delivery.leadTime}</span></div>
                                )}
                                {currentQuoteData.delivery.cost && (
                                  <div className="text-white/70">Cost: <span className="text-white">${currentQuoteData.delivery.cost}</span></div>
                                )}
                                {currentQuoteData.delivery.location && (
                                  <div className="text-white/70">Location: <span className="text-white">{currentQuoteData.delivery.location}</span></div>
                                )}
                              </div>
                            </div>
                          )}
                          
                          {/* Status Text */}
                          <p className="mt-2 text-xs text-stone-300">
                            {orderBuilderStatus.delivery.completed 
                              ? 'Delivery cost calculated by AI'
                              : 'Awaiting delivery cost from AI quote'}
                          </p>
                        </>
                      )}
                    </div>
                  </div>
                </div>

                {/* Step 4: Cost Breakdown - Multiple Quote Versions */}
                {orderBuilderStatus.costBreakdown.available && orderBuilderStatus.costBreakdown.versions.length > 0 && (
                  <div className="p-3 rounded-xl border transition-all duration-300 border-blue-400/30 bg-blue-400/10">
                    <div className="space-y-3">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <CurrencyDollarIcon className="h-4 w-4 text-blue-400" />
                          <h4 className="text-sm font-medium tracking-tight text-white">Cost Breakdown</h4>
                          <span className="text-[10px] px-2 py-0.5 rounded-full border border-blue-400/30 bg-blue-400/10 text-blue-300">
                            {orderBuilderStatus.costBreakdown.versions.length} Quote{orderBuilderStatus.costBreakdown.versions.length !== 1 ? 's' : ''}
                          </span>
                        </div>
                        <button
                          onClick={() => toggleBlockCollapse('costBreakdown')}
                          className="p-1 rounded-lg border border-stone-600 bg-black/30 backdrop-blur-sm hover:bg-black/40 transition-all duration-200"
                        >
                          <ChevronDownIcon 
                            className={`h-4 w-4 text-stone-300 transition-transform duration-200 ${
                              collapsedBlocks.costBreakdown ? 'rotate-180' : ''
                            }`} 
                          />
                        </button>
                      </div>
                      
                      {!collapsedBlocks.costBreakdown && (
                        <>
                          {/* Quote Version Cards */}
                          <div className="space-y-3 max-h-80 overflow-y-auto">
                            {orderBuilderStatus.costBreakdown.versions.map((version) => {
                              const isSelected = version.id === orderBuilderStatus.costBreakdown.selectedVersionId;
                              const priceDifference = orderBuilderStatus.costBreakdown.versions.length > 1 && version.version > 1 
                                ? version.pricing.total - orderBuilderStatus.costBreakdown.versions[0].pricing.total 
                                : 0;
                              
                              return (
                                <div 
                                  key={version.id}
                                  onClick={() => selectQuoteVersion(version.id)}
                                  className={`p-3 rounded-xl border cursor-pointer transition-all duration-300 ${
                                    isSelected 
                                      ? 'border-blue-400/40 bg-blue-400/15 ring-1 ring-blue-400/20'
                                      : 'border-stone-600 bg-black/30 backdrop-blur-sm hover:border-blue-400/20 hover:bg-blue-400/5'
                                  }`}
                                >
                              {/* Version Header */}
                              <div className="flex items-center justify-between mb-2">
                                <div className="flex items-center gap-2">
                                  <div className={`h-5 w-5 rounded-full border grid place-items-center transition-colors ${
                                    isSelected 
                                      ? 'border-blue-400/40 bg-blue-400/20 text-blue-300'
                                      : 'border-stone-500 bg-black/30 backdrop-blur-sm text-stone-300'
                                  }`}>
                                    {isSelected ? (
                                      <CheckIcon className="h-3 w-3" />
                                    ) : (
                                      <span className="text-[10px] font-medium">V{version.version}</span>
                                    )}
                                  </div>
                                  <div>
                                    <span className={`text-xs font-medium ${
                                      isSelected ? 'text-white/95' : 'text-stone-200'
                                    }`}>
                                      {version.label || `Version ${version.version}`}
                                    </span>
                                    {priceDifference !== 0 && (
                                      <span className={`ml-2 text-[10px] px-1.5 py-0.5 rounded-full ${
                                        priceDifference > 0 
                                          ? 'bg-red-400/10 text-red-300 border border-red-400/20'
                                          : 'bg-green-400/10 text-green-300 border border-green-400/20'
                                      }`}>
                                        {priceDifference > 0 ? '+' : ''}${priceDifference.toFixed(2)}
                                      </span>
                                    )}
                                  </div>
                                </div>
                                <span className={`text-sm font-bold ${
                                  isSelected ? 'text-blue-300' : 'text-white/70'
                                }`}>
                                  ${version.pricing.total.toFixed(2)}
                                </span>
                              </div>
                              
                              {/* Quick Cost Overview */}
                              <div className="grid grid-cols-3 gap-2 text-[10px]">
                                <div className="text-center">
                                  <div className={`font-medium ${
                                    isSelected ? 'text-emerald-300' : 'text-stone-300'
                                  }`}>
                                    ${version.pricing.baseProductCost.toFixed(2)}
                                  </div>
                                  <div className={`${isSelected ? 'text-white/70' : 'text-white/50'}`}>Caps</div>
                                </div>
                                <div className="text-center">
                                  <div className={`font-medium ${
                                    isSelected ? 'text-amber-300' : 'text-stone-300'
                                  }`}>
                                    ${version.pricing.logosCost.toFixed(2)}
                                  </div>
                                  <div className={`${isSelected ? 'text-white/70' : 'text-white/50'}`}>Logos</div>
                                </div>
                                <div className="text-center">
                                  <div className={`font-medium ${
                                    isSelected ? 'text-cyan-300' : 'text-stone-300'
                                  }`}>
                                    ${version.pricing.deliveryCost.toFixed(2)}
                                  </div>
                                  <div className={`${isSelected ? 'text-white/70' : 'text-white/50'}`}>Delivery</div>
                                </div>
                              </div>
                              
                              {/* Per Piece Cost */}
                              <div className={`mt-2 text-[10px] text-center ${
                                isSelected ? 'text-white/70' : 'text-white/50'
                              }`}>
                                ${(version.pricing.total / version.pricing.quantity).toFixed(2)} per piece ‚Ä¢ {version.pricing.quantity} pieces
                              </div>
                            </div>
                              );
                            })}
                          </div>
                          
                          {/* Selection Helper */}
                          {orderBuilderStatus.costBreakdown.versions.length > 1 && (
                            <div className="text-[10px] text-white/50 text-center pt-2 border-t border-stone-600">
                              Click on a quote version to select it for ordering
                            </div>
                          )}
                        </>
                      )}
                    </div>
                  </div>
                )}
              </div>

              {/* Professional Lead Time Calculator & Box Interface */}
              {orderBuilderStatus.costBreakdown.available && (
                <div className="mt-4 p-4 rounded-xl bg-gradient-to-br from-[#8F5E25]/80 via-[#8F5E25]/60 to-[#8F5E25]/40 border border-stone-600">
                  <div className="flex items-center gap-2 mb-3">
                    <CalendarDaysIcon className="w-4 h-4 text-[#D4A574]" />
                    <span className="text-sm font-medium text-white">Production Timeline & Packaging</span>
                    {isCalculatingLeadTime && (
                      <div className="w-3 h-3 border border-[#D4A574]/30 border-t-[#D4A574] rounded-full animate-spin"></div>
                    )}
                  </div>

                  {leadTimeData ? (
                    <div className="space-y-4">
                      {/* Lead Time Display */}
                      {leadTimeData.leadTime && (
                        <div className="p-3 rounded-lg  bg-gradient-to-r from-blue-900 to-purple-900 border border-stone-700">
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex items-center gap-2">
                              <CalendarDaysIcon className="w-4 h-4 text-blue-400" />
                              <span className="text-sm font-medium text-white">Delivery Timeline</span>
                            </div>
                            <div className="text-right">
                              <div className="text-lg font-semibold text-blue-300">
                                {leadTimeData.leadTime.totalDays} Days
                              </div>
                              <div className="text-xs text-stone-300">
                                Delivery: {new Date(leadTimeData.leadTime.deliveryDate).toLocaleDateString()}
                              </div>
                            </div>
                          </div>
                          <div className="space-y-1">
                            {leadTimeData.leadTime.details.map((detail, index) => (
                              <div key={index} className="text-xs text-white/70 flex items-center">
                                <div className="w-1 h-1 bg-blue-400/60 rounded-full mr-2"></div>
                                {detail}
                              </div>
                            ))}
                          </div>
                        </div>
                      )}

                      {/* Box Calculator Display */}
                      {leadTimeData.boxes && (
                        <div className="p-3 rounded-lg  bg-gradient-to-r from-green-900 to-blue-900 border border-stone-700">
                          <div className="flex items-center justify-between mb-3">
                            <div className="flex items-center gap-2">
                              <ArchiveBoxIcon className="w-4 h-4 text-green-400" />
                              <span className="text-sm font-medium text-white">Packaging Breakdown</span>
                            </div>
                            <div className="text-right">
                              <div className="text-lg font-semibold text-green-300">
                                {leadTimeData.boxes.totalBoxes} Boxes
                              </div>
                              <div className="text-xs text-stone-300">
                                Total pieces
                              </div>
                            </div>
                          </div>

                          {/* Box Lines */}
                          <div className="space-y-2 mb-3">
                            {leadTimeData.boxes.lines.map((line, index) => (
                              <div key={index} className="flex items-center justify-between p-2 rounded bg-black/30 backdrop-blur-sm">
                                <div className="flex items-center gap-2">
                                  <ArchiveBoxIcon className="w-3 h-3 text-green-400/70" />
                                  <span className="text-xs text-stone-200">{line.label}</span>
                                </div>
                                <div className="text-right">
                                  <div className="text-xs font-medium text-white">
                                    {line.count}x {line.pieces}pc boxes
                                  </div>
                                  <div className="text-[10px] text-stone-300">
                                    {line.dimensions}cm
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>

                          {/* Weight Information */}
                          <div className="flex items-center justify-between pt-2 border-t border-stone-600">
                            <div className="flex items-center gap-2">
                              <ScaleIcon className="w-3 h-3 text-cyan-400/70" />
                              <span className="text-xs text-white/70">Weight</span>
                            </div>
                            <div className="text-right">
                              <div className="text-xs text-white">
                                Net: <span className="font-medium text-cyan-300">{leadTimeData.boxes.netWeightKg}kg</span>
                              </div>
                              <div className="text-xs text-white">
                                Chargeable: <span className="font-medium text-cyan-300">{leadTimeData.boxes.chargeableWeightKg}kg</span>
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  ) : (
                    <div className="text-center py-4">
                      <div className="text-sm text-stone-300">
                        {isCalculatingLeadTime ? 'Calculating production timeline and packaging...' : 'Select a quote version to see production timeline and packaging details'}
                      </div>
                    </div>
                  )}
                </div>
              )}

              {/* Action Buttons - Integrated in Order Builder */}
              <div className="mt-4 pt-4 border-t border-stone-600">
                <div className="flex items-center justify-between gap-3">
                  <button 
                    onClick={handleQuoteOrder}
                    disabled={!canQuoteOrder()}
                    className={`px-3.5 py-2 rounded-full text-sm border transition-all duration-300 flex-1 ${
                      canQuoteOrder()
                        ? 'border-orange-400/30 bg-gradient-to-r from-orange-400/10 to-yellow-400/10 text-orange-300 hover:bg-orange-400/15 hover:border-orange-300/50 hover:text-orange-200 animate-pulse hover:animate-none relative overflow-hidden before:absolute before:inset-0 before:bg-gradient-to-r before:from-transparent before:via-orange-300/10 before:to-transparent before:translate-x-[-100%] hover:before:translate-x-[100%] before:transition-transform before:duration-1000'
                        : 'border-stone-600 text-white/50 cursor-not-allowed bg-black/30 backdrop-blur-sm'
                    }`}
                  >
                    Quote Order
                  </button>
                  <button 
                    onClick={handlePlaceOrder}
                    disabled={!canPlaceOrder()}
                    className={`px-4 py-2 rounded-full text-sm font-medium tracking-tight border transition-all duration-300 flex-1 ${
                      canPlaceOrder()
                        ? 'border-green-400/30 bg-green-400/10 text-green-300 hover:bg-green-400/15 hover:border-green-300/50 hover:text-green-200'
                        : 'border-stone-600 text-white/50 cursor-not-allowed bg-black/30 backdrop-blur-sm'
                    }`}
                  >
                    Place Order
                  </button>
                </div>
                <div className="mt-2 text-[10px] text-white/50 text-center">
                  {!canQuoteOrder() && !canPlaceOrder() && 'Complete Cap Style & Delivery sections to enable actions'}
                  {canQuoteOrder() && !canPlaceOrder() && 'Quote ready - complete all sections to place order'}
                  {canPlaceOrder() && 'All sections complete - ready to place order'}
                </div>
              </div>
              </section>
            )}
          </aside>
        </main>

        {/* Conversation History Sidebar */}
        {showConversationHistory && (
          <div className="fixed inset-0 lg:left-0 lg:top-0 lg:bottom-0 lg:right-auto z-50 lg:w-96 bg-black/50 lg:bg-transparent animate-in slide-in-from-left duration-300">
            {/* Mobile backdrop */}
            <div 
              className="absolute inset-0 bg-black/50 backdrop-blur-sm lg:hidden" 
              onClick={() => setShowConversationHistory(false)}
            ></div>
            {/* Sidebar */}
            <div className="relative h-full w-full max-w-sm lg:max-w-none lg:w-96 bg-gradient-to-br from-black/95 lg:from-black/40 via-black/90 lg:via-black/35 to-black/85 lg:to-black/30 backdrop-blur-xl border-r border-stone-500/30 overflow-hidden flex flex-col shadow-[0_0_50px_rgba(0,0,0,0.8)]">
              {/* Header */}
              <div className="p-4 border-b border-stone-500/30 bg-gradient-to-r from-black/30 to-black/20 backdrop-blur-sm">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center gap-3">
                    <div className="h-8 w-8 rounded-xl bg-gradient-to-br from-blue-500/20 to-blue-600/10 border border-blue-400/30 grid place-items-center">
                      <ChatBubbleLeftRightIcon className="h-4 w-4 text-blue-400" />
                    </div>
                    <h2 className="text-lg font-semibold text-white tracking-tight">Conversation History</h2>
                  </div>
                  <div className="flex items-center gap-2">
                    <button
                      onClick={() => {
                        console.log('üî• MANUAL REFRESH: Force loading conversations...');
                        console.log('üî• Current state:', {
                          authLoading,
                          isAuthenticated,
                          hasUserId: !!authUser?.id,
                          userEmail: authUser?.email,
                          conversationsInitialized: conversationsInitialized.current,
                          conversationsLength: conversations.length
                        });
                        conversationsInitialized.current = false; // Reset flag
                        loadUserConversations();
                      }}
                      disabled={isLoadingConversations}
                      className="p-2 rounded-xl border border-stone-500/30 bg-black/30 backdrop-blur-sm hover:bg-black/40 hover:border-stone-400/40 text-stone-300 hover:text-white transition-all duration-200 disabled:opacity-50 hover:shadow-lg"
                      title={`Refresh conversations (User: ${authUser?.email || 'Not logged in'})`}
                    >
                      <ArrowPathIcon className={`h-4 w-4 ${isLoadingConversations ? 'animate-spin' : ''}`} />
                    </button>
                    <button
                      onClick={() => setShowConversationHistory(false)}
                      className="p-2 rounded-xl border border-stone-500/30 bg-black/30 backdrop-blur-sm hover:bg-red-400/10 hover:border-red-400/30 text-stone-300 hover:text-red-400 transition-all duration-200 hover:shadow-lg"
                    >
                      <span className="text-lg lg:text-sm font-semibold">√ó</span>
                    </button>
                  </div>
                </div>

                {/* New Conversation Button */}
                <button
                  onClick={startNewConversation}
                  className="w-full flex items-center justify-center gap-2 px-4 py-2.5 rounded-xl border border-lime-400/30 bg-gradient-to-r from-lime-400/15 to-lime-500/10 text-lime-300 hover:bg-gradient-to-r hover:from-lime-400/20 hover:to-lime-500/15 hover:border-lime-400/40 transition-all duration-200 font-medium shadow-[0_4px_20px_rgba(132,204,22,0.15)] hover:shadow-[0_6px_25px_rgba(132,204,22,0.25)]"
                >
                  <PlusIcon className="h-4 w-4" />
                  New Conversation
                </button>

                {/* Search */}
                <div className="mt-4 relative">
                  <div className="absolute left-3 top-1/2 transform -translate-y-1/2 pointer-events-none">
                    <MagnifyingGlassIcon className="h-4 w-4 text-white/40" />
                  </div>
                  <input
                    type="text"
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    placeholder="Search conversations..."
                    className="w-full pl-10 pr-4 py-2.5 bg-black/30 backdrop-blur-sm border border-stone-500/30 rounded-xl text-sm text-white placeholder:text-white/40 focus:border-blue-400/40 focus:bg-black/40 focus:outline-none focus:ring-1 focus:ring-blue-400/20 transition-all duration-200"
                  />
                </div>
              </div>

              {/* Conversation List */}
              <div className="flex-1 overflow-y-auto p-4 space-y-3">
                {isLoadingConversations ? (
                  <div className="flex items-center justify-center py-12">
                    <div className="flex flex-col items-center gap-3">
                      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-400"></div>
                      <p className="text-sm text-white/60">Loading conversations...</p>
                    </div>
                  </div>
                ) : filteredConversations.length === 0 ? (
                  <div className="text-center py-8">
                    <div className="mb-6 p-4 bg-gradient-to-br from-black/40 to-black/30 backdrop-blur-sm rounded-xl border border-stone-500/30 text-xs text-left shadow-lg">
                      <div className="font-medium text-white/70 mb-2">Debug Info:</div>
                      <div className="space-y-1 text-white/50">
                        <div>Auth Loading: {authLoading ? 'Yes' : 'No'}</div>
                        <div>Is Authenticated: {isAuthenticated ? 'Yes' : 'No'}</div>
                        <div>User ID: {authUser?.id || 'None'}</div>
                        <div>User Email: {authUser?.email || 'None'}</div>
                        <div>Total Conversations: {conversations.length}</div>
                        <div>Loading Conversations: {isLoadingConversations ? 'Yes' : 'No'}</div>
                      </div>
                    </div>
                    <div className="text-white/60 font-medium">
                      {conversations.length === 0 ? 'No conversations yet' : 'No matching conversations'}
                    </div>
                    <p className="text-white/40 text-sm mt-2">Start a new conversation to get help with your orders</p>
                  </div>
                ) : (
                  <div className="space-y-2">
                    {filteredConversations.map((conversation) => (
                      <div
                        key={conversation.id}
                        className={`group p-4 rounded-xl border cursor-pointer transition-all duration-200 hover:shadow-lg hover:-translate-y-0.5 ${
                          conversation.id === conversationId
                            ? 'border-blue-400/40 bg-gradient-to-br from-blue-400/15 to-blue-500/10 ring-1 ring-blue-400/20 shadow-[0_4px_20px_rgba(59,130,246,0.15)]'
                            : 'border-stone-500/30 bg-gradient-to-br from-black/40 to-black/30 backdrop-blur-sm hover:border-stone-400/40 hover:from-black/50 hover:to-black/35'
                        }`}
                        onClick={() => loadConversation(conversation.id)}
                      >
                        <div className="flex items-start justify-between">
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center gap-2 mb-1">
                              <div className={`h-2 w-2 rounded-full ${
                                conversation.status === 'ACTIVE' ? 'bg-green-400' : 'bg-white/40'
                              }`} />
                              <span className="text-sm font-medium text-white truncate flex-1">
                                {conversation.title || `Conversation ${conversation.id.slice(-6)}`}
                              </span>
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  regenerateConversationTitle(conversation.id);
                                }}
                                className="opacity-0 group-hover:opacity-100 p-1 rounded hover:bg-blue-400/20 text-blue-400/70 hover:text-blue-400 transition-all duration-200"
                                title="Regenerate title"
                              >
                                <ArrowPathIcon className="h-3 w-3" />
                              </button>
                            </div>
                            
                            {conversation.preview && (
                              <p className="text-xs text-stone-300 line-clamp-2 mb-1">
                                {conversation.preview.content}
                              </p>
                            )}
                            
                            <div className="flex items-center gap-3 text-xs text-white/50">
                              <div className="flex items-center gap-1">
                                <ClockIcon className="h-3 w-3" />
                                {formatConversationTime(conversation.lastActivity || conversation.createdAt)}
                              </div>
                              <span>{conversation.messageCount} messages</span>
                            </div>
                          </div>
                          
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              deleteConversation(conversation.id);
                            }}
                            className="opacity-0 group-hover:opacity-100 p-2 rounded-xl border border-transparent hover:border-red-400/30 hover:bg-red-400/10 text-red-400/70 hover:text-red-400 transition-all duration-200 hover:shadow-lg"
                          >
                            <TrashIcon className="h-4 w-4" />
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>

              {/* Footer */}
              <div className="p-4 border-t border-stone-500/30 bg-gradient-to-r from-black/30 to-black/20 backdrop-blur-sm">
                <div className="text-xs text-white/50 text-center font-medium">
                  {conversations.length} total conversation{conversations.length !== 1 ? 's' : ''}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
} 
