import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const includeOrders = searchParams.get('includeOrders') === 'true';
    const activeOnly = searchParams.get('activeOnly') === 'true';

    // Build where clause for active shipments only
    const where = activeOnly 
      ? {
          OR: [
            { status: 'ACTIVE' },
            { status: 'PREPARING' },
            { status: 'READY_TO_SHIP' },
          ]
        }
      : {};

    const shipments = await prisma.shipment.findMany({
      where,
      include: {
        orders: includeOrders ? {
          select: {
            id: true,
            productName: true,
            customerInfo: true,
            status: true,
            createdAt: true,
            totalUnits: true,
            calculatedTotal: true,
            userEmail: true,
          }
        } : false,
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    // Calculate statistics for each shipment
    const shipmentsWithStats = shipments.map(shipment => {
      const stats = {
        totalOrders: shipment.orders?.length || 0,
        totalUnits: shipment.orders?.reduce((sum: number, order: any) => sum + (order.totalUnits || 0), 0) || 0,
        totalValue: shipment.orders?.reduce((sum: number, order: any) => sum + (order.calculatedTotal || 0), 0) || 0,
        ordersByStatus: shipment.orders?.reduce((acc: any, order: any) => {
          acc[order.status] = (acc[order.status] || 0) + 1;
          return acc;
        }, {}) || {},
      };

      return {
        ...shipment,
        stats,
      };
    });

    // Overall statistics
    const overallStats = {
      totalShipments: shipments.length,
      activeShipments: shipments.filter(s => ['ACTIVE', 'PREPARING', 'READY_TO_SHIP'].includes(s.status || '')).length,
      totalOrdersInShipments: shipments.reduce((sum, s) => sum + (s.orders?.length || 0), 0),
      totalUnitsInShipments: shipments.reduce((sum, s) => sum + (s.orders?.reduce((orderSum: number, order: any) => orderSum + (order.totalUnits || 0), 0) || 0), 0),
      totalValueInShipments: shipments.reduce((sum, s) => sum + (s.orders?.reduce((orderSum: number, order: any) => orderSum + (order.calculatedTotal || 0), 0) || 0), 0),
    };

    return NextResponse.json({
      shipments: shipmentsWithStats,
      stats: overallStats,
    });
  } catch (error) {
    console.error('Error fetching admin shipments:', error);
    return NextResponse.json(
      { error: 'Failed to fetch shipments' },
      { status: 500 }
    );
  }
}