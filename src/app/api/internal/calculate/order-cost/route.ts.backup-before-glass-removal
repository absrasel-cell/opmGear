import { NextRequest, NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';
import { parse } from 'csv-parse/sync';

interface OrderCalculation {
  productName: string;
  priceTier: string;
  quantity: number;
  customizations: {
    logos?: Array<{
      type: string;
      size: string;
      positions: string[];
    }>;
    accessories?: string[];
    services?: string[];
    shipping?: {
      method: string;
      destination: string;
    };
  };
}

export async function POST(request: NextRequest) {
  try {
    const orderData: OrderCalculation = await request.json();

    if (!orderData.productName || !orderData.quantity || orderData.quantity < 48) {
      return NextResponse.json(
        { error: 'Invalid order data. Minimum order quantity is 48.' },
        { status: 400 }
      );
    }

    // Load pricing data
    const blankCapPath = path.join(process.cwd(), 'src/app/csv/Blank Cap Pricings.csv');
    const customizationPath = path.join(process.cwd(), 'src/app/csv/Customization Pricings.csv');

    const blankCapContent = fs.readFileSync(blankCapPath, 'utf-8');
    const customizationContent = fs.readFileSync(customizationPath, 'utf-8');

    const blankCapPricing = parse(blankCapContent, {
      columns: true,
      skip_empty_lines: true,
      cast: (value, context) => {
        if (context.column?.startsWith('price')) {
          return parseFloat(value) || 0;
        }
        return value;
      }
    });

    const customizationPricing = parse(customizationContent, {
      columns: true,
      skip_empty_lines: true,
      cast: (value, context) => {
        if (context.column?.startsWith('price')) {
          return parseFloat(value) || 0;
        }
        return value;
      }
    });

    // Find tier pricing
    const tierData = blankCapPricing.find((tier: any) => 
      tier.Name.toLowerCase() === (orderData.priceTier || 'tier 2').toLowerCase()
    );

    if (!tierData) {
      return NextResponse.json(
        { error: 'Invalid price tier' },
        { status: 400 }
      );
    }

    // Determine price based on quantity
    let unitPrice = 0;
    const qty = orderData.quantity;

    if (qty >= 10000) unitPrice = tierData.price10000;
    else if (qty >= 2880) unitPrice = tierData.price2880;
    else if (qty >= 1152) unitPrice = tierData.price1152;
    else if (qty >= 576) unitPrice = tierData.price576;
    else if (qty >= 144) unitPrice = tierData.price144;
    else unitPrice = tierData.price48;

    const baseTotal = unitPrice * qty;

    // Calculate customization costs
    let customizationTotal = 0;
    let customizationBreakdown: any[] = [];

    // Logo costs
    if (orderData.customizations.logos) {
      for (const logo of orderData.customizations.logos) {
        const logoType = customizationPricing.find((item: any) => 
          item.Name.toLowerCase().includes(logo.type.toLowerCase()) &&
          item.Name.toLowerCase().includes(logo.size.toLowerCase())
        );

        if (logoType) {
          let logoUnitCost = 0;
          if (qty >= 20000) logoUnitCost = logoType.price20000 || logoType.price10000;
          else if (qty >= 10000) logoUnitCost = logoType.price10000;
          else if (qty >= 2880) logoUnitCost = logoType.price2880;
          else if (qty >= 1152) logoUnitCost = logoType.price1152;
          else if (qty >= 576) logoUnitCost = logoType.price576;
          else if (qty >= 144) logoUnitCost = logoType.price144;
          else logoUnitCost = logoType.price48;

          const logoTotal = logoUnitCost * qty * (logo.positions?.length || 1);
          customizationTotal += logoTotal;
          
          customizationBreakdown.push({
            type: 'Logo',
            description: `${logo.type} ${logo.size} - ${logo.positions?.join(', ') || 'Front'}`,
            unitCost: logoUnitCost,
            quantity: qty,
            positions: logo.positions?.length || 1,
            total: logoTotal
          });

          // Add mold charges for rubber and leather patches
          if (logo.type.toLowerCase().includes('rubber') || logo.type.toLowerCase().includes('leather')) {
            const moldCharge = 150; // Standard mold charge
            customizationTotal += moldCharge;
            customizationBreakdown.push({
              type: 'Mold Charge',
              description: `One-time mold setup for ${logo.type}`,
              unitCost: moldCharge,
              quantity: 1,
              positions: 1,
              total: moldCharge
            });
          }
        }
      }
    }

    // Accessories costs
    if (orderData.customizations.accessories) {
      for (const accessory of orderData.customizations.accessories) {
        const accessoryType = customizationPricing.find((item: any) => 
          item.Name.toLowerCase().includes(accessory.toLowerCase()) &&
          item.type === 'Accessories'
        );

        if (accessoryType) {
          let accessoryUnitCost = 0;
          if (qty >= 20000) accessoryUnitCost = accessoryType.price20000 || accessoryType.price10000;
          else if (qty >= 10000) accessoryUnitCost = accessoryType.price10000;
          else if (qty >= 2880) accessoryUnitCost = accessoryType.price2880;
          else if (qty >= 1152) accessoryUnitCost = accessoryType.price1152;
          else if (qty >= 576) accessoryUnitCost = accessoryType.price576;
          else if (qty >= 144) accessoryUnitCost = accessoryType.price144;
          else accessoryUnitCost = accessoryType.price48;

          const accessoryTotal = accessoryUnitCost * qty;
          customizationTotal += accessoryTotal;
          
          customizationBreakdown.push({
            type: 'Accessory',
            description: accessoryType.Name,
            unitCost: accessoryUnitCost,
            quantity: qty,
            positions: 1,
            total: accessoryTotal
          });
        }
      }
    }

    // Services costs
    if (orderData.customizations.services) {
      for (const service of orderData.customizations.services) {
        if (service.toLowerCase().includes('graphics')) {
          customizationTotal += 50;
          customizationBreakdown.push({
            type: 'Service',
            description: 'Graphics Design Service',
            unitCost: 50,
            quantity: 1,
            positions: 1,
            total: 50
          });
        }
        if (service.toLowerCase().includes('sampling')) {
          customizationTotal += 100;
          customizationBreakdown.push({
            type: 'Service',
            description: 'Physical Sample Creation',
            unitCost: 100,
            quantity: 1,
            positions: 1,
            total: 100
          });
        }
      }
    }

    // Shipping costs (simplified - can be enhanced)
    let shippingCost = 0;
    if (orderData.customizations.shipping) {
      if (qty < 3168) {
        // Express shipping
        if (orderData.customizations.shipping.method?.toLowerCase().includes('priority')) {
          shippingCost = Math.min(qty * 0.15, 300); // Cap at $300
        } else {
          shippingCost = Math.min(qty * 0.12, 250); // Regular express
        }
      } else {
        // Freight shipping
        if (orderData.customizations.shipping.method?.toLowerCase().includes('air')) {
          shippingCost = Math.min(qty * 0.08, 400); // Air freight
        } else {
          shippingCost = Math.min(qty * 0.04, 200); // Sea freight
        }
      }
    }

    const totalCost = baseTotal + customizationTotal + shippingCost;

    return NextResponse.json({
      calculation: {
        productName: orderData.productName,
        priceTier: orderData.priceTier || 'Tier 2',
        quantity: qty,
        breakdown: {
          baseProduct: {
            unitPrice: unitPrice,
            quantity: qty,
            total: baseTotal
          },
          customizations: customizationBreakdown,
          shipping: shippingCost > 0 ? {
            method: orderData.customizations.shipping?.method || 'Standard',
            cost: shippingCost
          } : null
        },
        totals: {
          baseTotal: baseTotal,
          customizationTotal: customizationTotal,
          shippingTotal: shippingCost,
          grandTotal: totalCost
        }
      },
      estimatedLeadTime: '7-14 business days',
      minimumQuantity: 48
    });

  } catch (error) {
    console.error('Internal API Error - Order Cost Calculation:', error);
    return NextResponse.json(
      { error: 'Failed to calculate order cost' },
      { status: 500 }
    );
  }
}