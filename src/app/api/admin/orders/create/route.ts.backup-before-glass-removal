import { NextRequest, NextResponse } from 'next/server';
import { requireAdmin } from '@/lib/auth-helpers';
import { OrderRecordingSystem, convertAdminToStandardOrder } from '@/lib/order-recording-system';

/**
 * Admin Order Creation API
 * Allows admin users to create orders on behalf of customers
 */
export async function POST(request: NextRequest) {
  try {
    // Require admin authentication
    const { user, profile } = await requireAdmin(request);
    
    const rawOrderData = await request.json();
    
    console.log('=== ADMIN ORDER CREATION ===');
    console.log('üë§ Admin user:', profile.email);
    console.log('üìÑ Order data:', Object.keys(rawOrderData));
    
    // Convert admin order data to standard format
    const standardOrderData = convertAdminToStandardOrder({
      ...rawOrderData,
      createdByAdmin: {
        id: user.id,
        email: profile.email,
        name: profile.name,
        role: profile.accessRole
      }
    });
    
    // Set up admin-specific recording options
    const recordingOptions = {
      idempotencyKey: `admin_${user.id}_${Date.now()}`,
      skipDuplicateCheck: rawOrderData.skipDuplicateCheck || false,
      autoCalculateCosts: rawOrderData.autoCalculateCosts !== false, // Default true
      createInvoice: rawOrderData.createInvoice || false,
      notifyCustomer: rawOrderData.notifyCustomer || false,
      assignToShipment: !!rawOrderData.shipmentId,
      updateInventory: rawOrderData.updateInventory || false
    };
    
    console.log('üéØ Admin recording options:', recordingOptions);
    
    // Record the order using the streamlined system
    const result = await OrderRecordingSystem.recordOrder(standardOrderData, recordingOptions);
    
    if (!result.success) {
      console.error('‚ùå Admin order creation failed:', result.errors);
      return NextResponse.json({
        error: 'Failed to create order',
        details: result.errors
      }, { status: 500 });
    }
    
    console.log('‚úÖ Admin order created successfully:', result.orderId);
    
    // Return admin-specific response with additional details
    return NextResponse.json({
      message: 'Order created successfully',
      orderId: result.orderId,
      order: result.order,
      createdBy: profile.email,
      invoice: result.invoice,
      shipmentAssignment: result.shipmentAssignment,
      warnings: result.warnings || []
    }, { status: 201 });

  } catch (error) {
    if (error instanceof Error && error.message === 'Forbidden: Admin access required') {
      return NextResponse.json({ error: 'Admin access required' }, { status: 403 });
    }
    
    console.error('üí• Admin order creation error:', error);
    return NextResponse.json({
      error: 'Failed to create order',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}