import { NextRequest, NextResponse } from 'next/server';
import prisma from '@/lib/prisma';
import { requireAuth } from '@/lib/auth-helpers';

export async function GET(request: NextRequest) {
  try {
    const user = await requireAuth(request);

    // Fetch all user data
    const userData = await prisma.user.findUnique({
      where: { id: user.id },
      include: {
        orders: {
          select: {
            id: true,
            productName: true,
            status: true,
            orderSource: true,
            createdAt: true,
            updatedAt: true,
            customerInfo: true,
            orderTotal: true,
            selectedColors: true,
            selectedOptions: true,
            multiSelectOptions: true,
            logoSetupSelections: true,
            additionalInstructions: true,
          }
        },
        sentMessages: {
          select: {
            id: true,
            subject: true,
            category: true,
            priority: true,
            createdAt: true,
          }
        },
        receivedMessages: {
          select: {
            id: true,
            subject: true,
            category: true,
            priority: true,
            createdAt: true,
          }
        }
      },
    });

    if (!userData) {
      return NextResponse.json(
        { error: 'User data not found' },
        { status: 404 }
      );
    }

    // Remove sensitive data
    const { passwordHash, ...exportData } = userData;

    // Create export package
    const dataExport = {
      exportDate: new Date().toISOString(),
      userProfile: {
        id: exportData.id,
        email: exportData.email,
        name: exportData.name,
        phone: exportData.phone,
        company: exportData.company,
        address: exportData.address,
        preferences: exportData.preferences,
        createdAt: exportData.createdAt,
        updatedAt: exportData.updatedAt,
      },
      orders: exportData.orders,
      messages: {
        sent: exportData.sentMessages,
        received: exportData.receivedMessages,
      },
      summary: {
        totalOrders: exportData.orders.length,
        totalSentMessages: exportData.sentMessages.length,
        totalReceivedMessages: exportData.receivedMessages.length,
        accountAge: Math.floor((Date.now() - new Date(exportData.createdAt).getTime()) / (1000 * 60 * 60 * 24)) + ' days',
      }
    };

    // Return as JSON file
    const response = new NextResponse(JSON.stringify(dataExport, null, 2), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
        'Content-Disposition': `attachment; filename="user-data-${userData.id}-${Date.now()}.json"`,
      },
    });

    return response;
  } catch (error: any) {
    if (error.message === 'Unauthorized') {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }
    console.error('Error exporting user data:', error);
    return NextResponse.json(
      { error: 'Failed to export user data' },
      { status: 500 }
    );
  }
}