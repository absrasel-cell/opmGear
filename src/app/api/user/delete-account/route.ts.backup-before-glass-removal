import { NextRequest, NextResponse } from 'next/server';
import prisma from '@/lib/prisma';
import { requireAuth } from '@/lib/auth-helpers';
import { supabase } from '@/lib/supabase';

export async function DELETE(request: NextRequest) {
  try {
    const user = await requireAuth(request);

    // Check if user has any active orders that prevent deletion
    const activeOrders = await prisma.order.findMany({
      where: {
        customerInfo: {
          path: ['email'],
          equals: user.email,
        },
        status: {
          in: ['PENDING', 'CONFIRMED', 'PROCESSING']
        }
      }
    });

    if (activeOrders.length > 0) {
      return NextResponse.json(
        { 
          error: 'Cannot delete account with active orders. Please wait for orders to complete or contact support.',
          activeOrderCount: activeOrders.length
        },
        { status: 400 }
      );
    }

    // Start transaction to delete all user data
    await prisma.$transaction(async (tx) => {
      // Delete user's messages (both sent and received)
      await tx.message.deleteMany({
        where: {
          OR: [
            { senderId: user.id },
            { recipientId: user.id }
          ]
        }
      });

      // Update orders to anonymize customer info instead of deleting
      // This preserves business records while removing personal data
      await tx.order.updateMany({
        where: {
          customerInfo: {
            path: ['email'],
            equals: user.email,
          }
        },
        data: {
          customerInfo: {
            name: '[Deleted User]',
            email: '[deleted@example.com]',
            phone: null,
            company: null,
          }
        }
      });

      // Delete the user record
      await tx.user.delete({
        where: { id: user.id }
      });
    });

    // Delete from Supabase Auth
    const { error: authError } = await supabase.auth.admin.deleteUser(user.id);
    
    if (authError) {
      console.error('Error deleting user from Supabase Auth:', authError);
      // Continue since user was already deleted from database
      // This is a cleanup that can fail without breaking the main flow
    }

    return NextResponse.json({
      message: 'Account successfully deleted'
    });

  } catch (error: any) {
    if (error.message === 'Unauthorized') {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }
    console.error('Error deleting account:', error);
    return NextResponse.json(
      { error: 'Failed to delete account' },
      { status: 500 }
    );
  }
}