import { NextRequest, NextResponse } from 'next/server';
import { getCurrentUser, getUserProfile } from '@/lib/auth-helpers';
import { OrderRecordingSystem, convertCheckoutToStandardOrder } from '@/lib/order-recording-system';

/**
 * Wholesale Order Creation API
 * Handles bulk orders and volume pricing for wholesale customers
 */
export async function POST(request: NextRequest) {
  try {
    // Get current user
    const user = await getCurrentUser(request);
    if (!user) {
      return NextResponse.json({ error: 'Authentication required' }, { status: 401 });
    }
    
    // Get user profile to check wholesale access
    const profile = await getUserProfile(user.id);
    if (!profile || (profile.customerRole !== 'WHOLESALE' && profile.accessRole === 'CUSTOMER')) {
      return NextResponse.json({ error: 'Wholesale access required' }, { status: 403 });
    }
    
    const rawOrderData = await request.json();
    
    console.log('=== WHOLESALE ORDER CREATION ===');
    console.log('üë§ Wholesale user:', profile.email);
    console.log('üìÑ Order data:', Object.keys(rawOrderData));
    console.log('üì¶ Bulk order:', rawOrderData.isBulkOrder || false);
    
    // Get client IP and user agent
    const ipAddress = request.headers.get('x-forwarded-for') || 
                     request.headers.get('x-real-ip') || 
                     'wholesale-dashboard';
    const userAgent = request.headers.get('user-agent') || 'wholesale-interface';
    
    // Convert wholesale order data to standard format
    const standardOrderData = convertCheckoutToStandardOrder({
      ...rawOrderData,
      userId: user.id,
      userEmail: user.email || profile.email,
      orderType: 'AUTHENTICATED',
      orderSource: rawOrderData.isBulkOrder ? 'BULK_ORDER' : 'PRODUCT_CUSTOMIZATION',
      priceTier: rawOrderData.priceTier || 'Tier 2', // Wholesale typically gets Tier 2 pricing
      status: rawOrderData.requiresApproval ? 'PENDING' : 'CONFIRMED',
      ipAddress,
      userAgent,
      paymentProcessed: false, // Wholesale orders may use terms/invoice payment
      wholesaleInfo: {
        customerRole: profile.customerRole,
        company: profile.company || rawOrderData.customerInfo?.company,
        isBulkOrder: rawOrderData.isBulkOrder || false,
        requiresApproval: rawOrderData.requiresApproval || false,
        paymentTerms: rawOrderData.paymentTerms || 'NET30'
      }
    });
    
    // Set up wholesale-specific recording options
    const recordingOptions = {
      idempotencyKey: `wholesale_${user.id}_${Date.now()}`,
      skipDuplicateCheck: rawOrderData.skipDuplicateCheck || false,
      autoCalculateCosts: true, // Always calculate wholesale pricing
      createInvoice: rawOrderData.createInvoice !== false, // Default true for wholesale
      notifyCustomer: true, // Notify wholesale customers
      assignToShipment: !!rawOrderData.shipmentId,
      updateInventory: true // Update inventory for wholesale orders
    };
    
    console.log('üéØ Wholesale recording options:', recordingOptions);
    
    // Record the order using the streamlined system
    const result = await OrderRecordingSystem.recordOrder(standardOrderData, recordingOptions);
    
    if (!result.success) {
      console.error('‚ùå Wholesale order creation failed:', result.errors);
      return NextResponse.json({
        error: 'Failed to create wholesale order',
        details: result.errors
      }, { status: 500 });
    }
    
    console.log('‚úÖ Wholesale order created successfully:', result.orderId);
    
    // Return wholesale-specific response
    return NextResponse.json({
      message: rawOrderData.requiresApproval ? 
        'Wholesale order submitted for approval' : 
        'Wholesale order created successfully',
      orderId: result.orderId,
      order: result.order,
      customerType: 'WHOLESALE',
      paymentTerms: rawOrderData.paymentTerms || 'NET30',
      invoice: result.invoice,
      shipmentAssignment: result.shipmentAssignment,
      warnings: result.warnings || [],
      requiresApproval: rawOrderData.requiresApproval || false
    }, { status: 201 });

  } catch (error) {
    console.error('üí• Wholesale order creation error:', error);
    return NextResponse.json({
      error: 'Failed to create wholesale order',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}