generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Cart {
  id        String    @id
  userId    String?
  sessionId String?
  items     Json      @default("[]")
  createdAt DateTime  @default(now())
  updatedAt DateTime
  expiresAt DateTime?
  User      User?     @relation(fields: [userId], references: [id])

  @@index([expiresAt])
  @@index([sessionId])
  @@index([userId])
}

model FormSubmission {
  id            String             @id @default(cuid())
  formType      FormSubmissionType
  name          String
  email         String
  subject       String?
  message       String
  phone         String?
  company       String?
  metadata      Json?
  status        FormStatus         @default(NEW)
  priority      FormPriority       @default(NORMAL)
  assignedToId  String?
  responseDate  DateTime?
  resolved      Boolean            @default(false)
  resolvedAt    DateTime?
  resolvedBy    String?
  ipAddress     String?
  userAgent     String?
  referrer      String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  User          User?              @relation(fields: [assignedToId], references: [id])

  @@index([formType])
  @@index([status])
  @@index([priority])
  @@index([assignedToId])
  @@index([createdAt])
  @@index([email])
  @@index([resolved])
}

model Conversation {
  id                  String                @id
  userId              String?
  sessionId           String?
  title               String?
  context             ConversationContext   @default(SUPPORT)
  status              ConversationStatus    @default(ACTIVE)
  isArchived          Boolean               @default(false)
  metadata            Json?
  tags                String[]              @default([])
  summary             String?
  lastActivity        DateTime              @default(now())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  hasQuote            Boolean               @default(false)
  quoteCompletedAt    DateTime?
  orderBuilderStateId String?               @unique
  User                User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  ConversationMessage ConversationMessage[]
  ConversationQuotes  ConversationQuotes[]
  OrderBuilderState   OrderBuilderState?   @relation(fields: [orderBuilderStateId], references: [id])

  @@index([context])
  @@index([isArchived])
  @@index([lastActivity])
  @@index([sessionId])
  @@index([status])
  @@index([userId])
  @@index([userId, lastActivity])
  @@index([hasQuote])
  @@index([quoteCompletedAt])
}

model ConversationMessage {
  id             String       @id
  conversationId String
  role           MessageRole
  content        String
  metadata       Json?
  attachments    Json[]       @default([])
  isEdited       Boolean      @default(false)
  editedAt       DateTime?
  tokens         Int?
  processingTime Int?
  model          String?
  error          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([conversationId])
  @@index([createdAt])
  @@index([role])
}

model Invoice {
  id          String        @id
  number      String        @unique
  orderId     String
  customerId  String
  status      InvoiceStatus @default(DRAFT)
  issueDate   DateTime      @default(now())
  dueDate     DateTime?
  currency    String        @default("USD")
  subtotal    Decimal       @db.Decimal(12, 2)
  discount    Decimal       @default(0) @db.Decimal(12, 2)
  shipping    Decimal       @default(0) @db.Decimal(12, 2)
  tax         Decimal       @default(0) @db.Decimal(12, 2)
  total       Decimal       @db.Decimal(12, 2)
  notes       String?
  pdfUrl      String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  User        User          @relation(fields: [customerId], references: [id])
  Order       Order         @relation(fields: [orderId], references: [id])
  InvoiceItem InvoiceItem[]

  @@index([customerId])
  @@index([issueDate])
  @@index([orderId])
  @@index([status])
}

model InvoiceItem {
  id          String  @id
  invoiceId   String
  orderItemId String?
  name        String
  description String?
  quantity    Int     @default(1)
  unitPrice   Decimal @db.Decimal(12, 2)
  total       Decimal @db.Decimal(12, 2)
  Invoice     Invoice @relation(fields: [invoiceId], references: [id])

  @@index([invoiceId])
}

model Message {
  id                            String          @id
  content                       String
  category                      MessageCategory
  priority                      MessagePriority @default(NORMAL)
  attachments                   Json[]          @default([])
  fromUserId                    String?
  toUserId                      String?
  fromEmail                     String?
  toEmail                       String?
  fromName                      String?
  toName                        String?
  isRead                        Boolean         @default(false)
  isAdminMessage                Boolean         @default(false)
  replyToId                     String?
  createdAt                     DateTime        @default(now())
  updatedAt                     DateTime
  User_Message_fromUserIdToUser User?           @relation("Message_fromUserIdToUser", fields: [fromUserId], references: [id])
  Message                       Message?        @relation("MessageToMessage", fields: [replyToId], references: [id])
  other_Message                 Message[]       @relation("MessageToMessage")
  User_Message_toUserIdToUser   User?           @relation("Message_toUserIdToUser", fields: [toUserId], references: [id])

  @@index([createdAt])
  @@index([fromUserId])
  @@index([isRead])
  @@index([toUserId])
}

model Order {
  id                     String       @id
  productName            String
  selectedColors         Json
  logoSetupSelections    Json
  selectedOptions        Json
  multiSelectOptions     Json
  customerInfo           Json
  uploadedLogoFiles      Json?
  additionalInstructions String?
  additionalInstruction  String?
  userId                 String?
  userEmail              String?
  orderType              OrderType
  orderSource            OrderSource  @default(PRODUCT_CUSTOMIZATION)
  status                 OrderStatus  @default(PENDING)
  createdAt              DateTime     @default(now())
  updatedAt              DateTime
  ipAddress              String?
  userAgent              String?
  trackingNumber         String?
  lastEditedBy           Json?
  shipmentId             String?
  costBreakdown          Json?
  customerTotal          Decimal?     @db.Decimal(12, 2)
  factoryCosts           Decimal?     @db.Decimal(12, 2)
  marginApplied          Boolean      @default(false)
  marginSettings         Json?
  originalCosts          Json?
  calculatedTotal        Decimal?     @db.Decimal(12, 2)
  lastCalculatedAt       DateTime?
  totalCalculationHash   String?
  totalUnits             Int?
  Invoice                Invoice[]
  Shipment               Shipment?    @relation(fields: [shipmentId], references: [id])
  User                   User?        @relation(fields: [userId], references: [id])
  OrderAsset             OrderAsset[]
  QuoteOrder             QuoteOrder?

  @@index([calculatedTotal])
  @@index([createdAt])
  @@index([marginApplied])
  @@index([shipmentId])
  @@index([status, createdAt])
  @@index([status])
  @@index([totalUnits])
  @@index([userEmail, createdAt])
  @@index([userEmail])
  @@index([userId])
}

model OrderAsset {
  id         String    @id
  orderId    String
  userId     String
  kind       AssetKind
  position   String?
  bucket     String
  path       String
  mimeType   String
  sizeBytes  Int
  width      Int?
  height     Int?
  checksum   String?
  uploadedAt DateTime  @default(now())
  Order      Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model PricingTier {
  id         String   @id
  name       String   @unique
  price48    Decimal  @db.Decimal(12, 2)
  price144   Decimal  @db.Decimal(12, 2)
  price576   Decimal  @db.Decimal(12, 2)
  price1152  Decimal  @db.Decimal(12, 2)
  price2880  Decimal  @db.Decimal(12, 2)
  price10000 Decimal  @db.Decimal(12, 2)
  isDefault  Boolean  @default(false)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  @@index([isActive])
  @@index([isDefault])
}

model Quote {
  id           String      @id @default(cuid())
  productSlug  String
  productName  String
  customerInfo Json
  requirements Json
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  status       QuoteStatus @default(PENDING)
  ipAddress    String?
  userAgent    String?
  userId       String?
  User         User?       @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([userId])
}


model QuoteOrder {
  id                     String             @id
  sessionId              String             @unique
  title                  String?
  status                 QuoteOrderStatus   @default(IN_PROGRESS)
  customerEmail          String?
  customerName           String?
  customerPhone          String?
  customerCompany        String?
  customerAddress        Json?
  productType            String?
  quantities             Json?
  colors                 Json?
  logoRequirements       Json?
  customizationOptions   Json?
  additionalRequirements String?
  customerInstructions   String?
  aiSummary              String?
  extractedSpecs         Json?
  estimatedCosts         Json?
  complexity             QuoteComplexity    @default(SIMPLE)
  tags                   String[]           @default([])
  uploadedFiles          Json[]             @default([])
  logoFiles              Json[]             @default([])
  attachments            Json[]             @default([])
  assignedToId           String?
  priority               QuotePriority      @default(NORMAL)
  internalNotes          String?
  followUpRequired       Boolean            @default(false)
  followUpDate           DateTime?
  convertedToOrderId     String?            @unique
  conversionDate         DateTime?
  conversionValue        Decimal?           @db.Decimal(12, 2)
  pdfUrl                 String?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime
  lastActivityAt         DateTime           @default(now())
  completedAt            DateTime?
  User                   User?              @relation(fields: [assignedToId], references: [id])
  Order                  Order?             @relation(fields: [convertedToOrderId], references: [id])
  QuoteOrderFile         QuoteOrderFile[]
  ConversationQuotes     ConversationQuotes[]

  @@index([assignedToId])
  @@index([assignedToId, status])
  @@index([complexity])
  @@index([createdAt])
  @@index([customerEmail])
  @@index([lastActivityAt])
  @@index([priority])
  @@index([sessionId])
  @@index([status])
  @@index([status, priority])
}

model QuoteOrderFile {
  id           String       @id
  quoteOrderId String
  originalName String
  fileName     String
  fileType     String
  fileSize     Int
  filePath     String
  bucket       String?
  category     FileCategory @default(OTHER)
  isLogo       Boolean      @default(false)
  description  String?
  uploadedAt   DateTime     @default(now())
  metadata     Json?
  QuoteOrder   QuoteOrder   @relation(fields: [quoteOrderId], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([isLogo])
  @@index([quoteOrderId])
  @@index([uploadedAt])
}

model Shipment {
  id                 String         @id
  buildNumber        String         @unique
  shippingMethod     ShippingMethod
  estimatedDeparture DateTime?
  estimatedDelivery  DateTime?
  actualDeparture    DateTime?
  actualDelivery     DateTime?
  status             ShipmentStatus @default(PREPARING)
  notes              String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime
  createdBy          String?
  Order              Order[]

  @@index([estimatedDeparture])
  @@index([shippingMethod])
  @@index([status])
}

model User {
  id                               String           @id
  email                            String           @unique
  name                             String?
  accessRole                       AccessRole       @default(CUSTOMER)
  customerRole                     CustomerRole     @default(RETAIL)
  adminLevel                       AdminLevel?
  privileges                       String[]         @default([])
  phone                            String?
  company                          String?
  avatarUrl                        String?
  address                          Json?
  preferences                      Json?
  isBanned                         Boolean          @default(false)
  lastLoginAt                      DateTime?
  createdAt                        DateTime         @default(now())
  updatedAt                        DateTime         @updatedAt
  Cart                             Cart[]
  Conversation                     Conversation[]
  FormSubmission                   FormSubmission[]
  Invoice                          Invoice[]
  Message_Message_fromUserIdToUser Message[]        @relation("Message_fromUserIdToUser")
  Message_Message_toUserIdToUser   Message[]        @relation("Message_toUserIdToUser")
  Order                            Order[]
  Quote                            Quote[]
  QuoteOrder                       QuoteOrder[]

  @@index([accessRole])
  @@index([customerRole])
  @@index([email])
  @@index([isBanned])
}

model ConversationQuotes {
  id             String       @id @default(cuid())
  conversationId String
  quoteOrderId   String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isMainQuote    Boolean      @default(true)
  Conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  QuoteOrder     QuoteOrder   @relation(fields: [quoteOrderId], references: [id], onDelete: Cascade)

  @@unique([conversationId, quoteOrderId])
  @@index([conversationId])
  @@index([quoteOrderId])
  @@index([isMainQuote])
}

model OrderBuilderState {
  id                   String        @id @default(cuid())
  sessionId            String        @unique
  capStyleSetup        Json?
  customization        Json?
  delivery             Json?
  costBreakdown        Json?
  productionTimeline   Json?
  packaging            Json?
  quoteData            Json?
  currentStep          String        @default("setup")
  isCompleted          Boolean       @default(false)
  completedAt          DateTime?
  totalCost            Decimal?      @db.Decimal(12, 2)
  totalUnits           Int?
  stateVersion         String        @default("1.0")
  metadata             Json?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  lastRestoredAt       DateTime?
  restorationCount     Int           @default(0)
  Conversation         Conversation?

  @@index([sessionId])
  @@index([isCompleted])
  @@index([completedAt])
  @@index([currentStep])
  @@index([updatedAt])
}

enum AccessRole {
  CUSTOMER
  STAFF
  SUPER_ADMIN
  MASTER_ADMIN
}

enum AdminLevel {
  MASTER
  REGULAR
}

enum AssetKind {
  LOGO
  ACCESSORY
  OTHER
}

enum ConversationContext {
  SUPPORT
  SALES
  ADMIN
  ORDER_INQUIRY
  QUOTE_REQUEST
  GENERAL
}

enum ConversationStatus {
  ACTIVE
  RESOLVED
  ARCHIVED
  ESCALATED
}

enum CustomerRole {
  RETAIL
  WHOLESALE
  SUPPLIER
}

enum FileCategory {
  LOGO
  REFERENCE_IMAGE
  MOCKUP
  SPECIFICATION
  OTHER
}

enum InvoiceStatus {
  DRAFT
  ISSUED
  PAID
  VOID
  REFUNDED
}

enum MessageCategory {
  ORDER
  SUPPORT
  BILLING
  URGENT
  GENERAL
}

enum MessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum OrderSource {
  PRODUCT_CUSTOMIZATION
  REORDER
  QUOTE_CONVERSION
  CHECKOUT_ORDER
}

enum OrderStatus {
  DRAFT
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum OrderType {
  AUTHENTICATED
  GUEST
}

enum QuoteComplexity {
  SIMPLE
  MODERATE
  COMPLEX
  ENTERPRISE
}

enum QuoteOrderStatus {
  IN_PROGRESS
  COMPLETED
  PENDING_REVIEW
  QUOTED
  CONVERTED
  ABANDONED
  CANCELLED
}

enum QuotePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum QuoteStatus {
  PENDING
  REVIEWED
  QUOTED
  ACCEPTED
  REJECTED
}

enum ShipmentStatus {
  PREPARING
  READY_TO_SHIP
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

enum ShippingMethod {
  PRIORITY_FEDEX
  SAVER_UPS
  AIR_FREIGHT
  SEA_FREIGHT
}

enum FormSubmissionType {
  CONTACT
  TRADITIONAL_QUOTE
  GALLERY_QUOTE
  CUSTOM_ORDER
  SUPPORT
  BULK_ORDER
  DESIGN_HELP
  SHIPPING
  PRICING
  PARTNERSHIP
  OTHER
}

enum FormStatus {
  NEW
  IN_REVIEW
  RESPONDED
  RESOLVED
  CLOSED
  ARCHIVED
}

enum FormPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}
